#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è leo-chat –¥–ª—è –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
"""

import os
from typing import Optional

class LeoChatConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è leo-chat —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG
    USE_NEW_RAG: bool = os.getenv('USE_NEW_RAG', 'true').lower() == 'true'
    RAG_FALLBACK_TO_OLD: bool = os.getenv('RAG_FALLBACK_TO_OLD', 'true').lower() == 'true'
    
    # Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SUPABASE_URL: str = os.getenv('SUPABASE_URL', '')
    SUPABASE_ANON_KEY: str = os.getenv('SUPABASE_ANON_KEY', '')
    SUPABASE_SERVICE_ROLE_KEY: str = os.getenv('SUPABASE_SERVICE_ROLE_KEY', '')
    
    # OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    OPENAI_API_KEY: str = os.getenv('OPENAI_API_KEY', '')
    OPENAI_EMBEDDING_MODEL: str = os.getenv('OPENAI_EMBEDDING_MODEL', 'text-embedding-3-small')
    
    # RAG –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    RAG_MATCH_THRESHOLD: float = float(os.getenv('RAG_MATCH_THRESHOLD', '0.35'))
    RAG_MATCH_COUNT: int = int(os.getenv('RAG_MATCH_COUNT', '6'))
    RAG_MAX_TOKENS: int = int(os.getenv('RAG_MAX_TOKENS', '1200'))
    RAG_CACHE_TTL_SEC: int = int(os.getenv('RAG_CACHE_TTL_SEC', '180'))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
    NEW_RAG_LEVEL_FILTER: bool = os.getenv('NEW_RAG_LEVEL_FILTER', 'true').lower() == 'true'
    NEW_RAG_SECTION_FILTER: bool = os.getenv('NEW_RAG_SECTION_FILTER', 'true').lower() == 'true'
    NEW_RAG_HYBRID_SEARCH: bool = os.getenv('NEW_RAG_HYBRID_SEARCH', 'true').lower() == 'true'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ª–∞–¥–∫–∏
    RAG_DEBUG: bool = os.getenv('RAG_DEBUG', 'false').lower() == 'true'
    RAG_LOG_QUERIES: bool = os.getenv('RAG_LOG_QUERIES', 'false').lower() == 'true'
    
    @classmethod
    def validate_config(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        required_vars = [
            'SUPABASE_URL',
            'SUPABASE_ANON_KEY', 
            'OPENAI_API_KEY'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not getattr(cls, var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            return False
        
        return True
    
    @classmethod
    def get_rag_config(cls) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'use_new_rag': cls.USE_NEW_RAG,
            'fallback_to_old': cls.RAG_FALLBACK_TO_OLD,
            'supabase_url': cls.SUPABASE_URL,
            'supabase_key': cls.SUPABASE_ANON_KEY,
            'openai_api_key': cls.OPENAI_API_KEY,
            'embedding_model': cls.OPENAI_EMBEDDING_MODEL,
            'match_threshold': cls.RAG_MATCH_THRESHOLD,
            'match_count': cls.RAG_MATCH_COUNT,
            'max_tokens': cls.RAG_MAX_TOKENS,
            'level_filter': cls.NEW_RAG_LEVEL_FILTER,
            'section_filter': cls.NEW_RAG_SECTION_FILTER,
            'hybrid_search': cls.NEW_RAG_HYBRID_SEARCH,
            'debug': cls.RAG_DEBUG,
            'log_queries': cls.RAG_LOG_QUERIES
        }
    
    @classmethod
    def print_config(cls):
        """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è leo-chat RAG:")
        print(f"  –ù–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞: {'‚úÖ' if cls.USE_NEW_RAG else '‚ùå'}")
        print(f"  Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é: {'‚úÖ' if cls.RAG_FALLBACK_TO_OLD else '‚ùå'}")
        print(f"  –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: {'‚úÖ' if cls.NEW_RAG_HYBRID_SEARCH else '‚ùå'}")
        print(f"  –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—è–º: {'‚úÖ' if cls.NEW_RAG_LEVEL_FILTER else '‚ùå'}")
        print(f"  –§–∏–ª—å—Ç—Ä –ø–æ —Å–µ–∫—Ü–∏—è–º: {'‚úÖ' if cls.NEW_RAG_SECTION_FILTER else '‚ùå'}")
        print(f"  –ü–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {cls.RAG_MATCH_THRESHOLD}")
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {cls.RAG_MATCH_COUNT}")
        print(f"  –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {cls.RAG_MAX_TOKENS}")
        print(f"  –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {cls.OPENAI_EMBEDDING_MODEL}")
        print(f"  –û—Ç–ª–∞–¥–∫–∞: {'‚úÖ' if cls.RAG_DEBUG else '‚ùå'}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = LeoChatConfig()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def is_new_rag_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è RAG —Å–∏—Å—Ç–µ–º–∞"""
    return config.USE_NEW_RAG

def is_fallback_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É"""
    return config.RAG_FALLBACK_TO_OLD

def get_supabase_config() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase"""
    return {
        'url': config.SUPABASE_URL,
        'anon_key': config.SUPABASE_ANON_KEY,
        'service_role_key': config.SUPABASE_SERVICE_ROLE_KEY
    }

def get_openai_config() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI"""
    return {
        'api_key': config.OPENAI_API_KEY,
        'embedding_model': config.OPENAI_EMBEDDING_MODEL
    }

def get_rag_params() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã RAG"""
    return {
        'match_threshold': config.RAG_MATCH_THRESHOLD,
        'match_count': config.RAG_MATCH_COUNT,
        'max_tokens': config.RAG_MAX_TOKENS,
        'cache_ttl_sec': config.RAG_CACHE_TTL_SEC
    }

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if config.validate_config():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        config.print_config()
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export SUPABASE_URL='https://your-project.supabase.co'")
        print("export SUPABASE_ANON_KEY='your-anon-key'")
        print("export OPENAI_API_KEY='sk-your-openai-key'")
