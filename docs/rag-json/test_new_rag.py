#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent))

from leo_chat_new_retriever import perform_new_rag_query, RAGConfig
from leo_chat_config import LeoChatConfig

async def test_basic_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    config = RAGConfig(
        use_new_rag=True,
        fallback_to_old=True,
        supabase_url=os.getenv('SUPABASE_URL', ''),
        supabase_key=os.getenv('SUPABASE_ANON_KEY', ''),
        openai_api_key=os.getenv('OPENAI_API_KEY', '')
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–ö–∞–∫ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏—è?",
        "–ö–∞–∫ —Ä–∞–∑–≤–∏—Ç—å –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞?",
        "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"
    ]
    
    for query in test_queries:
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {query}")
        try:
            result = await perform_new_rag_query(
                last_user_message=query,
                level_context="level_id=11",
                config=config
            )
            
            if result:
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤):")
                print(result[:200] + "..." if len(result) > 200 else result)
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_level_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —É—Ä–æ–≤–Ω—è–º"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º...")
    
    config = RAGConfig(
        use_new_rag=True,
        fallback_to_old=True,
        supabase_url=os.getenv('SUPABASE_URL', ''),
        supabase_key=os.getenv('SUPABASE_ANON_KEY', ''),
        openai_api_key=os.getenv('OPENAI_API_KEY', '')
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    test_levels = [11, 12, 13, 14, 15]
    
    for level in test_levels:
        print(f"\nüìä –£—Ä–æ–≤–µ–Ω—å {level}:")
        try:
            result = await perform_new_rag_query(
                last_user_message="—Ü–µ–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è",
                level_context=f"level_id={level}",
                config=config
            )
            
            if result:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.split('\\n'))} —Ñ–∞–∫—Ç–æ–≤")
                print(result[:150] + "..." if len(result) > 150 else result)
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –Ω–∞ —Å—Ç–∞—Ä—É—é RAG...")
    
    config = RAGConfig(
        use_new_rag=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        fallback_to_old=True,
        supabase_url=os.getenv('SUPABASE_URL', ''),
        supabase_key=os.getenv('SUPABASE_ANON_KEY', ''),
        openai_api_key=os.getenv('OPENAI_API_KEY', '')
    )
    
    try:
        result = await perform_new_rag_query(
            last_user_message="–ö–∞–∫ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏?",
            level_context="level_id=11",
            config=config
        )
        
        if result:
            print("‚úÖ Fallback —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(result[:200] + "..." if len(result) > 200 else result)
        else:
            print("‚ùå Fallback –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback: {e}")

async def test_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫"""
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    config = RAGConfig(
        use_new_rag=True,
        fallback_to_old=True,
        supabase_url="https://invalid-url.supabase.co",
        supabase_key="invalid-key",
        openai_api_key="invalid-key"
    )
    
    try:
        result = await perform_new_rag_query(
            last_user_message="—Ç–µ—Å—Ç",
            config=config
        )
        
        if result:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –æ—à–∏–±–∫—É")
            
    except Exception as e:
        print(f"‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {e}")

async def test_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    config = RAGConfig(
        use_new_rag=True,
        fallback_to_old=True,
        supabase_url=os.getenv('SUPABASE_URL', ''),
        supabase_key=os.getenv('SUPABASE_ANON_KEY', ''),
        openai_api_key=os.getenv('OPENAI_API_KEY', '')
    )
    
    import time
    
    queries = [
        "—Ü–µ–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è",
        "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥–∞",
        "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º—è",
        "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –Ω–∞–≤—ã–∫–∏",
        "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏–µ"
    ]
    
    total_time = 0
    successful_queries = 0
    
    for i, query in enumerate(queries, 1):
        print(f"  –ó–∞–ø—Ä–æ—Å {i}/{len(queries)}: {query}")
        
        start_time = time.time()
        try:
            result = await perform_new_rag_query(
                last_user_message=query,
                level_context="level_id=11",
                config=config
            )
            
            end_time = time.time()
            query_time = end_time - start_time
            total_time += query_time
            
            if result:
                successful_queries += 1
                print(f"    ‚úÖ {query_time:.2f}—Å, {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"    ‚ùå {query_time:.2f}—Å, –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                
        except Exception as e:
            end_time = time.time()
            query_time = end_time - start_time
            total_time += query_time
            print(f"    ‚ùå {query_time:.2f}—Å, –æ—à–∏–±–∫–∞: {e}")
    
    avg_time = total_time / len(queries)
    success_rate = (successful_queries / len(queries)) * 100
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {avg_time:.2f}—Å")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_queries}/{len(queries)} ({success_rate:.1f}%)")
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f}—Å")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π RAG —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not LeoChatConfig.validate_config():
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await test_basic_search()
    await test_level_filtering()
    await test_fallback()
    await test_error_handling()
    await test_performance()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
