name: CI

on:
  push:
    branches: ["main"]
  pull_request:

env:
  FLUTTER_VERSION: "3.32.1"
  JAVA_VERSION: "17"
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_ORG:           ${{ secrets.SENTRY_ORG }}
  SENTRY_PROJECT:       ${{ secrets.SENTRY_PROJECT }}
  SLACK_WEBHOOK_URL:    ${{ secrets.SLACK_WEBHOOK_URL }}
  SUPABASE_PROJECT_ID:  acevqbdpzgbtqznbpgzr

jobs:
  unit:
    name: "Unit tests"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Create real .env from GitHub Secrets
        run: |
          cat <<EOF > .env
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          SUPABASE_PERSONAL_ACCESS_TOKEN=${{ secrets.SUPABASE_PERSONAL_ACCESS_TOKEN }}
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          VERCEL_ACCESS_TOKEN=${{ secrets.VERCEL_ACCESS_TOKEN }}
          VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ID }}
          EOF

      - name: Run unit tests
        run: flutter test --coverage

      - name: Setup Supabase CLI
        if: failure()
        uses: supabase/setup-cli@v1

      - name: Fetch Supabase logs on failure
        if: failure()
        continue-on-error: true
        run: |
          supabase logs --project-ref $SUPABASE_PROJECT_ID --limit 100

  integration_web:
    name: "Integration tests (Web)"
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Create real .env from GitHub Secrets
        run: touch .env

      - name: Set up xvfb for headless Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          Xvfb :99 &
          export DISPLAY=:99

      - name: Run integration tests (Chrome)
        run: flutter test integration_test -d chrome

      - name: Setup Supabase CLI
        if: failure()
        uses: supabase/setup-cli@v1

      - name: Fetch Supabase logs on failure
        if: failure()
        continue-on-error: true
        run: |
          supabase logs --project-ref $SUPABASE_PROJECT_ID --limit 100

  integration_android:
    name: "Integration tests (Android)"
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Create placeholder .env
        run: touch .env

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run integration tests on Android emulator
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: 34
          arch: x86_64
          profile: pixel_6
          script: flutter test integration_test -d emulator

      - name: Install Supabase CLI
        if: failure()
        run: uses: supabase/setup-cli@v1

      - name: Fetch Supabase logs on failure
        if: failure()
        continue-on-error: true
        run: |
          supabase logs --project-ref $SUPABASE_PROJECT_ID --limit 100


  integration_ios:
    name: "Integration tests (iOS)"
    runs-on: macos-14
    needs: unit
    env:
      CI: "true"
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Create placeholder .env
        run: touch .env

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: |
            ~/.cocoapods
            ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Boot iOS simulator and run tests
        run: |
          xcrun simctl boot "iPhone 15" || true
          sleep 20
          flutter test integration_test -d "iPhone 15"

      - name: Setup Supabase CLI
        if: failure()
        uses: supabase/setup-cli@v1

      - name: Fetch Supabase logs on failure
        if: failure()
        continue-on-error: true
        run: |
          supabase logs --project-ref $SUPABASE_PROJECT_ID --limit 100

  supabase_advisors:
    name: "Supabase security advisors"
    runs-on: ubuntu-latest
    needs: [integration_web, integration_android, integration_ios]
    env:
      SUPABASE_PROJECT_ID: acevqbdpzgbtqznbpgzr
    steps:
      - uses: actions/checkout@v4

      - name: Install jq (for JSON processing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1

      - name: Run Supabase security advisors check
        env:
          SUPABASE_PROJECT_ID: ${{ env.SUPABASE_PROJECT_ID }}
        run: supabase logs --project-ref $SUPABASE_PROJECT_ID --limit 100 && \
             bash scripts/supabase_advisor_check.sh

  sentry_check:
    name: "Sentry unresolved check"
    runs-on: ubuntu-latest
    needs: [integration_web, integration_android, integration_ios]
    steps:
      - uses: actions/checkout@v4

      - name: Install jq (for JSON processing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install sentry-cli
        run: curl -sL https://sentry.io/get-cli/ | bash

      - name: Run Sentry unresolved issues check
        env:
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG:       ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT:   ${{ env.SENTRY_PROJECT }}
        run: bash scripts/sentry_check.sh

  email_notify:
    name: "Email notification"
    runs-on: ubuntu-latest
    needs: [unit, integration_web, integration_android, integration_ios, supabase_advisors, sentry_check]
    if: always()
    steps:
      - name: Send email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port:    ${{ secrets.SMTP_PORT }}
          username:       ${{ secrets.SMTP_USERNAME }}
          password:       ${{ secrets.SMTP_PASSWORD }}
          subject:        "BizLevel CI - Run #${{ github.run_number }} (Sentry: ${{ needs.sentry_check.result }})"
          to:             "deus2111@gmail.com"
          from:           "BizLevel CI <${{ secrets.SMTP_USERNAME }}>"
          content_type:   text/html
          body: |
            <h3>BizLevel CI â€“ workflow run #${{ github.run_number }}</h3>
            <ul>
              <li>Unit: ${{ needs.unit.result }}</li>
              <li>Web:  ${{ needs.integration_web.result }}</li>
              <li>Android: ${{ needs.integration_android.result }}</li>
              <li>iOS: ${{ needs.integration_ios.result }}</li>
              <li>Supabase Advisors: ${{ needs.supabase_advisors.result }}</li>
              <li>Sentry: ${{ needs.sentry_check.result }}</li>
            </ul>
            <p>Details: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">see workflow</a></p>
