---
alwaysApply: true
---

# BizLevel v2.0 - Cursor IDE Rules

## Project Context
You are working on BizLevel - an educational platform with gamification for learning business through a structured level system. This is a transformation of an existing Online Course App into a focused business education platform for the Kazakhstan market.

## Technical Stack
- Flutter (Dart) - mobile framework
- Supabase - backend (Auth, Database, Storage, Edge Functions)
- Riverpod - state management
- Better Player - video playback
- OpenAI API - AI mentor Leo
- MCP Supabase - database operations through Cursor

## Core Principles

### Code Reuse First
- ALWAYS check for existing widgets before creating new ones
- Prefer adapting existing components over writing from scratch
- The original app has many reusable widgets in lib/widgets/

### Simplicity Over Elegance
- Choose simple solutions that work over complex "perfect" ones
- Avoid over-engineering - this is an MVP
- If it works and is maintainable, it's good enough

### Mobile-First for Emerging Markets
- Optimize for slower connections
- Minimize data usage where possible
- Ensure smooth performance on mid-range devices
- Offline video caching is important

### Follow the Plan
- Stick to the implementation plan in project knowledge
- Don't deviate from the agreed architecture
- Each task should be completed as specified

## File Structure Rules

### Naming Conventions
- Files: snake_case (user_model.dart, leo_service.dart)
- Classes: PascalCase (UserModel, LeoService)
- Variables: camelCase (currentUser, messageCount)
- Constants: camelCase prefixed with 'k' (kMaxMessages, kAnimationDuration)
- Private members: prefix with underscore (_buildHeader, _isLoading)

### Widget Organization
- One widget per file
- Widget file name should match the widget class name
- Group related widgets in the same directory

### Import Order
1. Dart SDK imports
2. Flutter imports
3. Package imports (alphabetically)
4. Relative imports (alphabetically)
5. Part files (if any)

## State Management Rules

### Riverpod Usage
- Use ConsumerWidget for stateless widgets needing providers
- Use ConsumerStatefulWidget for stateful widgets needing providers
- Prefer ref.watch() for reactive updates
- Use ref.read() only in callbacks and non-build methods
- Never use ref.read() in build methods

### Provider Types
- StateProvider for simple state
- FutureProvider for async data fetching
- StreamProvider for real-time data
- StateNotifierProvider for complex state logic

## Supabase Integration

### Database Operations
- Always use typed models with fromJson/toJson
- Handle null cases explicitly
- Use RLS policies - never bypass them
- Batch operations when possible

### Error Handling
- Wrap all Supabase calls in try-catch
- Provide user-friendly error messages
- Log errors for debugging
- Implement retry logic for network failures

### Edge Functions
- Keep functions small and focused
- Always validate input
- Return consistent response formats
- Handle CORS properly for mobile

## UI/UX Guidelines

### Existing Components
- CustomImage - for all images
- CustomTextBox - for all text inputs
- BottomBarItem - for navigation
- NotificationBox - for badges/notifications

### Animations
- Use flutter_animate for simple animations
- Keep animations under 300ms
- Disable animations on slow devices
- Test on real devices, not just emulator

### Responsive Design
- Use MediaQuery sparingly
- Prefer Flexible/Expanded over fixed sizes
- Test on various screen sizes
- Account for keyboard appearance

## DO NOT Do These Things

### Architecture Anti-patterns
- DON'T create duplicate functionality
- DON'T bypass RLS policies
- DON'T store sensitive data locally
- DON'T ignore existing code structure
- DON'T make direct OpenAI calls from client

### Code Anti-patterns
- DON'T use print() - use debugPrint() or logging
- DON'T ignore null safety
- DON'T catch generic Exception - be specific
- DON'T use magic numbers - create constants
- DON'T write synchronous I/O operations

### Performance Anti-patterns
- DON'T rebuild entire widget trees unnecessarily
- DON'T load all data at once - paginate
- DON'T keep videos in memory - use caching
- DON'T make redundant API calls
- DON'T ignore dispose() methods

### Security Anti-patterns
- DON'T hardcode API keys
- DON'T trust client-side validation only
- DON'T store passwords in plain text
- DON'T expose internal errors to users
- DON'T skip authentication checks

## Working with Existing Code

### Before Creating New Code
1. Search for similar functionality
2. Check if existing widget can be adapted
3. Look for reusable patterns
4. Consider extending rather than replacing

### Refactoring Rules
- Only refactor if it adds clear value
- Preserve existing public APIs
- Update all usages when changing interfaces
- Test thoroughly after refactoring

### Code Removal
- Don't delete code without understanding its purpose
- Comment out before deleting if unsure
- Check for dependencies before removal
- Document why code was removed

## Error Messages

### User-Facing Errors
- Be friendly and helpful
- Suggest actions to resolve
- Avoid technical jargon
- Provide contact support option

### Developer Errors
- Be specific about what went wrong
- Include relevant context
- Suggest fixes if possible
- Log full stack traces

## MCP Supabase Usage

### Creating Tables
- Use @supabase create table commands
- Always include RLS policies
- Follow the schema in project docs
- Test policies after creation

### Queries
- Use typed parameters
- Validate input before queries
- Handle empty results gracefully
- Use appropriate indexes

## Testing Guidelines

### Test Types
- Unit tests for business logic
- Widget tests for UI components
- Integration tests for user flows
- Manual testing on real devices

### Test Coverage
- Critical paths must have tests
- Auth flow is priority #1
- Payment flow is priority #2
- Leo chat functionality is priority #3

## Deployment Checklist

### Before Building
- Remove all debug code
- Check for hardcoded test data
- Verify all environment variables
- Test on minimum supported devices

### Build Configuration
- Use --release flag for production
- Enable code obfuscation
- Minimize app size
- Include only necessary permissions

## Communication with AI Assistant

### Be Specific
- Provide file paths when discussing code
- Mention specific widget/class names
- Include error messages completely
- Describe expected vs actual behavior

### Context Matters
- Remind about project constraints
- Reference the implementation plan
- Mention any deviations from plan
- Keep focus on current task

Remember: The goal is to ship a working MVP in 14 days. Perfect is the enemy of done. Focus on delivering value to users while maintaining code quality that allows for future improvements.# BizLevel v2.0 - Cursor IDE Rules

## Project Context
You are working on BizLevel - an educational platform with gamification for learning business through a structured level system. This is a transformation of an existing Online Course App into a focused business education platform for the Kazakhstan market.

## Technical Stack
- Flutter (Dart) - mobile framework
- Supabase - backend (Auth, Database, Storage, Edge Functions)
- Riverpod - state management
- Better Player - video playback
- OpenAI API - AI mentor Leo
- MCP Supabase - database operations through Cursor

## Core Principles

### Code Reuse First
- ALWAYS check for existing widgets before creating new ones
- Prefer adapting existing components over writing from scratch
- The original app has many reusable widgets in lib/widgets/

### Simplicity Over Elegance
- Choose simple solutions that work over complex "perfect" ones
- Avoid over-engineering - this is an MVP
- If it works and is maintainable, it's good enough

### Mobile-First for Emerging Markets
- Optimize for slower connections
- Minimize data usage where possible
- Ensure smooth performance on mid-range devices
- Offline video caching is important

### Follow the Plan
- Stick to the implementation plan in project knowledge
- Don't deviate from the agreed architecture
- Each task should be completed as specified

## File Structure Rules

### Naming Conventions
- Files: snake_case (user_model.dart, leo_service.dart)
- Classes: PascalCase (UserModel, LeoService)
- Variables: camelCase (currentUser, messageCount)
- Constants: camelCase prefixed with 'k' (kMaxMessages, kAnimationDuration)
- Private members: prefix with underscore (_buildHeader, _isLoading)

### Widget Organization
- One widget per file
- Widget file name should match the widget class name
- Group related widgets in the same directory

### Import Order
1. Dart SDK imports
2. Flutter imports
3. Package imports (alphabetically)
4. Relative imports (alphabetically)
5. Part files (if any)

## State Management Rules

### Riverpod Usage
- Use ConsumerWidget for stateless widgets needing providers
- Use ConsumerStatefulWidget for stateful widgets needing providers
- Prefer ref.watch() for reactive updates
- Use ref.read() only in callbacks and non-build methods
- Never use ref.read() in build methods

### Provider Types
- StateProvider for simple state
- FutureProvider for async data fetching
- StreamProvider for real-time data
- StateNotifierProvider for complex state logic

## Supabase Integration

### Database Operations
- Always use typed models with fromJson/toJson
- Handle null cases explicitly
- Use RLS policies - never bypass them
- Batch operations when possible

### Error Handling
- Wrap all Supabase calls in try-catch
- Provide user-friendly error messages
- Log errors for debugging
- Implement retry logic for network failures

### Edge Functions
- Keep functions small and focused
- Always validate input
- Return consistent response formats
- Handle CORS properly for mobile

## UI/UX Guidelines

### Existing Components
- CustomImage - for all images
- CustomTextBox - for all text inputs
- BottomBarItem - for navigation
- NotificationBox - for badges/notifications

### Animations
- Use flutter_animate for simple animations
- Keep animations under 300ms
- Disable animations on slow devices
- Test on real devices, not just emulator

### Responsive Design
- Use MediaQuery sparingly
- Prefer Flexible/Expanded over fixed sizes
- Test on various screen sizes
- Account for keyboard appearance

## DO NOT Do These Things

### Architecture Anti-patterns
- DON'T create duplicate functionality
- DON'T bypass RLS policies
- DON'T store sensitive data locally
- DON'T ignore existing code structure
- DON'T make direct OpenAI calls from client

### Code Anti-patterns
- DON'T use print() - use debugPrint() or logging
- DON'T ignore null safety
- DON'T catch generic Exception - be specific
- DON'T use magic numbers - create constants
- DON'T write synchronous I/O operations

### Performance Anti-patterns
- DON'T rebuild entire widget trees unnecessarily
- DON'T load all data at once - paginate
- DON'T keep videos in memory - use caching
- DON'T make redundant API calls
- DON'T ignore dispose() methods

### Security Anti-patterns
- DON'T hardcode API keys
- DON'T trust client-side validation only
- DON'T store passwords in plain text
- DON'T expose internal errors to users
- DON'T skip authentication checks

## Working with Existing Code

### Before Creating New Code
1. Search for similar functionality
2. Check if existing widget can be adapted
3. Look for reusable patterns
4. Consider extending rather than replacing

### Refactoring Rules
- Only refactor if it adds clear value
- Preserve existing public APIs
- Update all usages when changing interfaces
- Test thoroughly after refactoring

### Code Removal
- Don't delete code without understanding its purpose
- Comment out before deleting if unsure
- Check for dependencies before removal
- Document why code was removed

## Error Messages

### User-Facing Errors
- Be friendly and helpful
- Suggest actions to resolve
- Avoid technical jargon
- Provide contact support option

### Developer Errors
- Be specific about what went wrong
- Include relevant context
- Suggest fixes if possible
- Log full stack traces

## MCP Supabase Usage

### Creating Tables
- Use @supabase create table commands
- Always include RLS policies
- Follow the schema in project docs
- Test policies after creation

### Queries
- Use typed parameters
- Validate input before queries
- Handle empty results gracefully
- Use appropriate indexes

## Testing Guidelines

### Test Types
- Unit tests for business logic
- Widget tests for UI components
- Integration tests for user flows
- Manual testing on real devices

### Test Coverage
- Critical paths must have tests
- Auth flow is priority #1
- Payment flow is priority #2
- Leo chat functionality is priority #3

## Deployment Checklist

### Before Building
- Remove all debug code
- Check for hardcoded test data
- Verify all environment variables
- Test on minimum supported devices

### Build Configuration
- Use --release flag for production
- Enable code obfuscation
- Minimize app size
- Include only necessary permissions

## Communication with AI Assistant

### Be Specific
- Provide file paths when discussing code
- Mention specific widget/class names
- Include error messages completely
- Describe expected vs actual behavior

### Context Matters
- Remind about project constraints
- Reference the implementation plan
- Mention any deviations from plan
- Keep focus on current task

Remember: The goal is to ship a working MVP in 14 days. Perfect is the enemy of done. Focus on delivering value to users while maintaining code quality that allows for future improvements.