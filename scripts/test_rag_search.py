#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RAG-–ø–æ–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤ BizLevel
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –∏ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import os
import logging
from pathlib import Path
import openai
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
script_dir = Path(__file__).parent
env_file = script_dir.parent / '.env'
load_dotenv(env_file)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RAGTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-–ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        self.openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.supabase: Client = create_client(
            os.getenv("SUPABASE_URL"),
            os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        )
        self.embedding_model = os.getenv("OPENAI_EMBEDDING_MODEL", "text-embedding-3-small")
    
    def check_cases_in_database(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–µ–π—Å–æ–≤
            result = self.supabase.table('documents').select('id, metadata').eq('metadata->>source', 'bizlevel_case').execute()
            
            if result.data:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —á–∞–Ω–∫–æ–≤
                chunk_types = {}
                case_ids = set()
                
                for doc in result.data:
                    metadata = doc.get('metadata', {})
                    chunk_type = metadata.get('chunk_type', 'unknown')
                    case_id = metadata.get('case_id', 'unknown')
                    
                    chunk_types[chunk_type] = chunk_types.get(chunk_type, 0) + 1
                    case_ids.add(case_id)
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                logger.info(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤: {len(case_ids)}")
                logger.info(f"  - –¢–∏–ø—ã —á–∞–Ω–∫–æ–≤: {chunk_types}")
                
                return True
            else:
                logger.error("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def test_rag_search(self, query: str, expected_keywords: list = None):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG-–ø–æ–∏—Å–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        try:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫: '{query}'")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            response = self.openai_client.embeddings.create(
                input=query,
                model=self.embedding_model
            )
            
            embedding = response.data[0].embedding
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            result = self.supabase.rpc('match_documents', {
                'query_embedding': embedding,
                'match_threshold': 0.3,
                'match_count': 5
            }).execute()
            
            if result.data:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result.data)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                
                for i, doc in enumerate(result.data, 1):
                    metadata = doc.get('metadata', {})
                    similarity = doc.get('similarity', 0)
                    
                    logger.info(f"  {i}. –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.3f}")
                    logger.info(f"     –ö–µ–π—Å: {metadata.get('case_title', 'N/A')}")
                    logger.info(f"     –¢–∏–ø: {metadata.get('chunk_type', 'N/A')}")
                    logger.info(f"     –£—Ä–æ–≤–µ–Ω—å: {metadata.get('level_id', 'N/A')}")
                    logger.info(f"     –ù–∞–≤—ã–∫: {metadata.get('skill_name', 'N/A')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if expected_keywords:
                        content = doc.get('content', '').lower()
                        found_keywords = [kw for kw in expected_keywords if kw.lower() in content]
                        if found_keywords:
                            logger.info(f"     ‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
                        else:
                            logger.info(f"     ‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    logger.info(f"     –ö–æ–Ω—Ç–µ–Ω—Ç: {doc.get('content', '')[:100]}...")
                    logger.info("")
                
                return True
            else:
                logger.warning("‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç RAG-—Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ RAG-—Å–∏—Å—Ç–µ–º—ã")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–µ–π—Å–æ–≤ –≤ –±–∞–∑–µ
        if not self.check_cases_in_database():
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞
        test_queries = [
            {
                'query': '–∞–≤—Ç–æ–º–æ–π–∫–∞',
                'keywords': ['–∞–≤—Ç–æ–º–æ–π–∫–∞', '–î–∞—É–ª–µ—Ç'],
                'description': '–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–µ–π—Å—É'
            },
            {
                'query': '—Å—Ç—Ä–µ—Å—Å –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç',
                'keywords': ['—Å—Ç—Ä–µ—Å—Å', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'],
                'description': '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–≤—ã–∫—É'
            },
            {
                'query': '–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á',
                'keywords': ['–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è', '–∑–∞–¥–∞—á–∏'],
                'description': '–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ'
            },
            {
                'query': '—Ç–æ—Ä–≥–æ–≤–ª—è –∏ —É—Å–ª—É–≥–∏',
                'keywords': ['—Ç–æ—Ä–≥–æ–≤–ª—è', '—É—Å–ª—É–≥–∏'],
                'description': '–ü–æ–∏—Å–∫ –ø–æ —Å—Ñ–µ—Ä–µ –±–∏–∑–Ω–µ—Å–∞'
            }
        ]
        
        success_count = 0
        for test in test_queries:
            logger.info(f"\nüìù {test['description']}")
            if self.test_rag_search(test['query'], test['keywords']):
                success_count += 1
        
        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        logger.info(f"  - –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{len(test_queries)}")
        
        if success_count == len(test_queries):
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['OPENAI_API_KEY', 'SUPABASE_URL', 'SUPABASE_SERVICE_ROLE_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return False
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tester = RAGTester()
    success = tester.run_comprehensive_test()
    
    return success

if __name__ == '__main__':
    success = main()
    exit(0 if success else 1)
