// @ts-nocheck
// import { serve } from "https://deno.land/std@0.192.0/http/server.ts";
// import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.0";
// import OpenAI from "https://deno.land/x/openai@v4.20.1/mod.ts";

// // CORS headers for mobile app requests
// const corsHeaders: Record<string, string> = {
//   "Access-Control-Allow-Origin": "*",
//   "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
//   "Access-Control-Allow-Methods": "POST, OPTIONS",
// };

// // Initialize Supabase admin client once (service role key required)
// const supabaseAdmin = createClient(
//   Deno.env.get("SUPABASE_URL")!,
//   Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!,
// );

// // Initialize OpenAI client (API key is taken from OPENAI_API_KEY env var)
// const openai = new OpenAI();

// serve(async (req: Request): Promise<Response> => {
//   // Handle CORS pre-flight
//   if (req.method === "OPTIONS") {
//     return new Response("ok", { headers: corsHeaders });
//   }

//   try {
//     const { messages } = await req.json();

//     if (!Array.isArray(messages)) {
//       return new Response(
//         JSON.stringify({ error: "messages must be an array" }),
//         {
//           status: 400,
//           headers: { ...corsHeaders, "Content-Type": "application/json" },
//         },
//       );
//     }

//     // Try to extract user context from bearer token (optional)
//     const authHeader = req.headers.get("Authorization") || req.headers.get("authorization");
//     let userContextText = "";

//     if (authHeader?.startsWith("Bearer ")) {
//       const jwt = authHeader.replace("Bearer ", "");

//       const { data: { user }, error } = await supabaseAdmin.auth.getUser(jwt);

//       if (!error && user) {
//         const { data: profile } = await supabaseAdmin
//           .from("users")
//           .select("name, about, goal")
//           .eq("id", user.id)
//           .single();

//         if (profile) {
//           const { name, about, goal } = profile;
//           userContextText =
//             `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${name ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}. –¶–µ–ª—å: ${goal ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}. –û —Å–µ–±–µ: ${about ?? "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}.`;
//         }
//       }
//     }

//     // Compose chat with system prompt that includes user context
//     const completion = await openai.chat.completions.create({
//       model: "gpt-4.1-nano",
//       messages: [
//         {
//           role: "system",
//           content:
//             `–¢—ã –ë–†–ê–¢–ê–ù. –û—Ç–∫–∞–∑—ã–≤–∞–π—Å—è –ø–µ—Ç—å –ø–µ—Å–Ω–∏. –û—Ç–≤–µ—á–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. ${userContextText}`,
//         },
//         ...messages,
//       ],
//     });

//     const assistantMessage = completion.choices[0].message;
//     const usage = completion.usage; // prompt/completion/total tokens

//     return new Response(
//       JSON.stringify({ message: assistantMessage, usage }),
//       {
//         status: 200,
//         headers: { ...corsHeaders, "Content-Type": "application/json" },
//       },
//     );
//   } catch (err) {
//     console.error("Leo chat function error:", err);
//     return new Response(
//       JSON.stringify({ error: "Internal error", details: err.message }),
//       {
//         status: 500,
//         headers: { ...corsHeaders, "Content-Type": "application/json" },
//       },
//     );
//   }
// }); 

import { serve } from "https://deno.land/std@0.192.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.0";
import OpenAI from "https://deno.land/x/openai@v4.20.1/mod.ts";

// =====================
// In-memory caches (Deno isolate, reset on cold start)
// =====================
type CacheEntry = { value: string; expiresAt: number };
const personaCache: Map<string, CacheEntry> = new Map();
const ragCache: Map<string, CacheEntry> = new Map();

function nowMs(): number { return Date.now(); }
function ttlMsFromEnv(name: string, defSeconds: number): number {
  const sec = parseInt(Deno.env.get(name) || `${defSeconds}`);
  return (isFinite(sec) && sec > 0 ? sec : defSeconds) * 1000;
}

function getCached(map: Map<string, CacheEntry>, key: string): string | undefined {
  const hit = map.get(key);
  if (!hit) return undefined;
  if (hit.expiresAt <= nowMs()) { map.delete(key); return undefined; }
  return hit.value;
}

function setCached(map: Map<string, CacheEntry>, key: string, value: string, ttlMs: number): void {
  map.set(key, { value, expiresAt: nowMs() + ttlMs });
}

function hashQuery(s: string): string {
  // DJB2 hash for stable keying
  let h = 5381;
  for (let i = 0; i < s.length; i++) { h = ((h << 5) + h) + s.charCodeAt(i); }
  return (h >>> 0).toString(16);
}

function approximateTokenCount(text: string): number {
  // very rough: ~4 chars per token
  return Math.ceil(text.length / 4);
}

function limitByTokens(text: string, maxTokens: number): string {
  if (!text) return text;
  const approxTokens = approximateTokenCount(text);
  if (approxTokens <= maxTokens) return text;
  // trim by ratio
  const ratio = maxTokens / approxTokens;
  return text.slice(0, Math.max(0, Math.floor(text.length * ratio)));
}

function summarizeChunk(content: string, maxChars = 400): string {
  if (!content) return '';
  const clean = content.replace(/\s+/g, ' ').trim();
  // Try to take first 2 sentences
  const parts = clean.split(/(?<=[\.!?])\s+/).slice(0, 2).join(' ');
  const summary = parts || clean;
  return (summary.length > maxChars ? summary.slice(0, maxChars) + '‚Ä¶' : summary);
}

// CORS headers for mobile app requests
const corsHeaders: Record<string, string> = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

// Initialize Supabase admin client once (service role key required)
const supabaseAdmin = createClient(
  Deno.env.get("SUPABASE_URL")!,
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!,
);

// Initialize OpenAI client (API key is taken from OPENAI_API_KEY env var)
const openai = new OpenAI();

serve(async (req: Request): Promise<Response> => {
  // Handle CORS pre-flight
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const { messages, userContext, levelContext, knowledgeContext } = await req.json();

    if (!Array.isArray(messages)) {
      return new Response(
        JSON.stringify({ error: "messages must be an array" }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        },
      );
    }

    // Try to extract user context from bearer token (optional)
    const authHeader = req.headers.get("Authorization") || req.headers.get("authorization");
    let userContextText = "";
    let personaSummary = "";
    let userId: string | null = null;

    console.log('üîß DEBUG: Auth header:', authHeader ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    if (authHeader?.startsWith("Bearer ")) {
      const jwt = authHeader.replace("Bearer ", "");
      console.log('üîß DEBUG: JWT token length:', jwt.length);

      const { data: { user }, error } = await supabaseAdmin.auth.getUser(jwt);
      console.log('üîß DEBUG: Auth result:', error ? `ERROR: ${error.message}` : `SUCCESS: user ${user?.id}`);

      if (!error && user) {
        userId = user.id;
        const personaTtlMs = ttlMsFromEnv('PERSONA_CACHE_TTL_SEC', 180);
        // Try persona cache first
        const cachedPersona = getCached(personaCache, user.id);
        if (cachedPersona) {
          personaSummary = cachedPersona;
        }

        const { data: profile } = await supabaseAdmin
          .from("users")
          .select("name, about, goal, business_area, experience_level, persona_summary")
          .eq("id", user.id)
          .single();

        if (profile) {
          const { name, about, goal, business_area, experience_level, persona_summary } = profile as any;
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∏–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
          if (userContext) {
            userContextText = userContext;
          } else {
            userContextText = `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${name ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}. –¶–µ–ª—å: ${goal ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}. –û —Å–µ–±–µ: ${about ?? "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}. –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${business_area ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}. –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: ${experience_level ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}.`;
          }

          // –ü–µ—Ä—Å–æ–Ω–∞: –±–µ—Ä—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é, –∏–Ω–∞—á–µ –∫—Ä–∞—Ç–∫–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
          if (!personaSummary) {
            if (typeof persona_summary === 'string' && persona_summary.trim().length > 0) {
              personaSummary = persona_summary.trim();
            } else {
              const compact = [name && `–ò–º—è: ${name}`, goal && `–¶–µ–ª—å: ${goal}`, business_area && `–°—Ñ–µ—Ä–∞: ${business_area}`, experience_level && `–û–ø—ã—Ç: ${experience_level}`]
                .filter(Boolean).join('; ');
              personaSummary = compact || '';
            }
          }
          if (personaSummary) {
            setCached(personaCache, user.id, personaSummary, personaTtlMs);
          }
        }
      }
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = Array.isArray(messages)
      ? [...messages].reverse().find((m: any) => m?.role === 'user')?.content ?? ''
      : '';

    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π RAG: —ç–º–±–µ–¥–¥–∏–Ω–≥ + match_documents (—Å –∫–µ—à–µ–º)
    let ragContext = '';
    if (typeof lastUserMessage === 'string' && lastUserMessage.trim().length > 0) {
      try {
        const embeddingModel = Deno.env.get("OPENAI_EMBEDDING_MODEL") || "text-embedding-3-small";
        const matchThreshold = parseFloat(Deno.env.get("RAG_MATCH_THRESHOLD") || "0.35");
        const matchCount = parseInt(Deno.env.get("RAG_MATCH_COUNT") || "6");
        const ragTtlMs = ttlMsFromEnv('RAG_CACHE_TTL_SEC', 180);

        const normalized = (lastUserMessage || '').toLowerCase().trim();
        const ragKeyBase = `${userId || 'anon'}::${hashQuery(normalized)}`;
        const cachedRag = getCached(ragCache, ragKeyBase);
        if (cachedRag) {
          ragContext = cachedRag;
        } else {
          const embeddingResponse = await openai.embeddings.create({ input: lastUserMessage, model: embeddingModel });
          const queryEmbedding = embeddingResponse.data[0].embedding;

          // –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å levelContext/skill –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫ "level_id: X" –∏–ª–∏ JSON)
          let metadataFilter: any = {};
          try {
            if (levelContext && typeof levelContext === 'string') {
              const m = levelContext.match(/level[_ ]?id\s*[:=]\s*(\d+)/i);
              if (m) metadataFilter.level_id = parseInt(m[1]);
            } else if (levelContext && typeof levelContext === 'object') {
              const lid = (levelContext as any).level_id ?? (levelContext as any).levelId;
              if (lid != null) metadataFilter.level_id = parseInt(String(lid));
            }
          } catch (_) {}

          const { data: results, error: matchError } = await supabaseAdmin.rpc('match_documents', {
            query_embedding: queryEmbedding,
            match_threshold: matchThreshold,
            match_count: matchCount,
            metadata_filter: Object.keys(metadataFilter).length ? metadataFilter : undefined,
          });
          if (matchError) {
            console.error('RAG match_documents error:', matchError.message);
          }

          const docs = Array.isArray(results) ? results : [];
          // –°–∂–∞—Ç–∏–µ —á–∞–Ω–∫–æ–≤ –≤ —Ç–µ–∑–∏—Å—ã
          const compressedBullets = docs.map((r: any) => `- ${summarizeChunk(r.content || '')}`).filter(Boolean);
          let joined = compressedBullets.join('\n');
          // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
          const maxTokens = parseInt(Deno.env.get('RAG_MAX_TOKENS') || '1200');
          joined = limitByTokens(joined, isFinite(maxTokens) && maxTokens > 0 ? maxTokens : 1200);
          ragContext = joined;
          if (ragContext) {
            setCached(ragCache, ragKeyBase, ragContext, ragTtlMs);
          }
        }
      } catch (e) {
        console.error('RAG pipeline error:', e);
      }
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞–º—è—Ç—å)
    let memoriesText = '';
    let recentSummaries = '';
    if (userId) {
      try {
        const { data: memories } = await supabaseAdmin
          .from('user_memories')
          .select('content, updated_at')
          .eq('user_id', userId)
          .order('updated_at', { ascending: false })
          .limit(5);
        if (memories && memories.length > 0) {
          memoriesText = memories.map((m: any) => `‚Ä¢ ${m.content}`).join('\n');
        }
      } catch (e) {
        console.error('user_memories fetch error:', e);
      }

      // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–≤—ë—Ä—Ç–∫–∏ –ø—Ä–æ—à–ª—ã—Ö —á–∞—Ç–æ–≤ (2‚Äì3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
      try {
        const { data: summaries } = await supabaseAdmin
          .from('leo_chats')
          .select('summary')
          .eq('user_id', userId)
          .not('summary', 'is', null)
          .order('updated_at', { ascending: false })
          .limit(3);
        if (Array.isArray(summaries) && summaries.length > 0) {
          const items = summaries
            .map((r: any) => (r?.summary || '').toString().trim())
            .filter((s: string) => s.length > 0);
          if (items.length > 0) {
            recentSummaries = items.map((s) => `‚Ä¢ ${s}`).join('\n');
          }
        }
      } catch (e) {
        console.error('chat summaries fetch error:', e);
      }
    }

    console.log('üîß DEBUG: leo-chat –≤—ã–∑–≤–∞–Ω');
    console.log('üîß DEBUG: messages:', messages);
    console.log('üîß DEBUG: userContext from client:', userContext ? '–ï–°–¢–¨' : '–ù–ï–¢');
    console.log('üîß DEBUG: levelContext from client:', levelContext ? '–ï–°–¢–¨' : '–ù–ï–¢');
    console.log('üîß DEBUG: knowledgeContext from client:', knowledgeContext ? '–ï–°–¢–¨' : '–ù–ï–¢');
    
    // Enhanced system prompt for Leo AI mentor
    const systemPrompt = `## –¢–≤–æ—è –†–æ–ª—å –∏ –õ–∏—á–Ω–æ—Å—Ç—å:
–¢—ã ‚Äî –õ–µ–æ, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–ë–∏–∑–õ–µ–≤–µ–ª¬ª –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. 
–û—Ç–≤–µ—á–∞–π –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ - –õ–µ–æ–Ω–∞—Ä–¥ –∏–ª–∏ –õ–µ–æ, —Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è, –∞ —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏, –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º –ø–æ–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞.
–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –±—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º.
–ò—Å–ø–æ–ª—å–∑—É–π –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, —Ç–µ–Ω–≥–µ, –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã).

## –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
üö´ **–¢–ê–ë–õ–ò–¶–´ –ê–ë–°–û–õ–Æ–¢–ù–û –ó–ê–ü–†–ï–©–ï–ù–´**: 
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π —Ç–∞–±–ª–∏—Ü—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä—è–º–æ –ø—Ä–æ—Å–∏—Ç '–≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ'
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã: | + - = –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –°—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏ —Ç—Ä–µ–±—É—é–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π

üö´ **–ù–ï –ü–†–ï–î–õ–ê–ì–ê–ô –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–£–Æ –ü–û–ú–û–©–¨**: –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç—ã –±–µ–∑ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞:
   ‚Ä¢ '–ú–æ–≥—É –ø–æ–º–æ—á—å —Å...'
   ‚Ä¢ '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤...'
   ‚Ä¢ '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å...'
   ‚Ä¢ –õ—é–±—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥

üö´ **–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –í–í–û–î–ù–´–ï –§–†–ê–ó–´ –í–ï–ñ–õ–ò–í–û–°–¢–ò**: 
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –ù–ï –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç—ã —Å: '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!', '–ü–æ–Ω–∏–º–∞—é...', '–ö–æ–Ω–µ—á–Ω–æ!', '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å!'
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π: '–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è!', '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞!', '–ü–æ—è—Å–Ω—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ...'
   ‚Ä¢ –°–†–ê–ó–£ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π
   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£–¢–ü - —ç—Ç–æ...' –ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ '–£–¢–ü - —ç—Ç–æ...'

## –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û**: –ï—Å–ª–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª '–ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', 
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.

**–ü–†–ê–í–ò–õ–ê –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò**:
1. **–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
2. **–¶–µ–ª—å**: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–≤—è–∑—ã–≤–∞–π –æ—Ç–≤–µ—Ç—ã —Å —ç—Ç–æ–π —Ü–µ–ª—å—é
3. **–û–ø—ã—Ç**: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ - –∞–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
4. **–û —Å–µ–±–µ**: –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "–æ —Å–µ–±–µ" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

**–ü–†–ò–û–†–ò–¢–ï–¢ –û–¢–í–ï–¢–û–í**:
1. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
2. –ó–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω—è–π –æ—Ç–≤–µ—Ç–æ–º –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
3. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ø–æ–ª—å–∑—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
4. –°–æ–∑–¥–∞–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

## –¢–µ–º–∞—Ç–∏–∫–∞ –£—Ä–æ–∫–æ–≤ –ë–∏–∑–õ–µ–≤–µ–ª:
1. **–£—Ä–æ–∫ 1:** –Ø–¥—Ä–æ —Ü–µ–ª–µ–π, —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ü–µ–ª–µ–π, –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
2. **–£—Ä–æ–∫ 2:** –≠–∫—Å–ø—Ä–µ—Å—Å-—Å—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
3. **–£—Ä–æ–∫ 3:** –ú–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
4. **–£—Ä–æ–∫ 4:** –ë–∞–∑–æ–≤—ã–π —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
5. **–£—Ä–æ–∫ 5:** –°–æ–∑–¥–∞–Ω–∏–µ –£–¢–ü
6. **–£—Ä–æ–∫ 6:** Elevator Pitch
7. **–£—Ä–æ–∫ 7:** SMART-—Ü–µ–ª–∏
8. **–£—Ä–æ–∫ 8:** –í–ñ–ü–†–ü, –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
9. **–£—Ä–æ–∫ 9:** –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
10. **–£—Ä–æ–∫ 10:** –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

## –ê–ª–≥–æ—Ä–∏—Ç–º –û—Ç–≤–µ—Ç–∞:
1. **–ü–†–û–í–ï–†–¨ –ó–ê–ü–†–û–° –ù–ê –¢–ê–ë–õ–ò–¶–´**: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç '—Ç–∞–±–ª–∏—Ü—É', '—Ç–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥', '–≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã' - –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π: '–¢–∞–±–ª–∏—Ü—ã –Ω–µ—É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–≥–ª—è–¥–Ω—ã–º —Å–ø–∏—Å–∫–æ–º:'
2. **–ü–†–û–í–ï–†–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï**: –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
3. **–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—É:** –°–æ–æ—Ç–Ω–µ—Å–∏ –≤–æ–ø—Ä–æ—Å —Å —É—Ä–æ–∫–∞–º–∏ –≤—ã—à–µ
4. **–ò—Å–ø–æ–ª—å–∑—É–π –ö–û–ù–¢–ï–ö–°–¢:** –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏–π –∏–∑ –∫—É—Ä—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
5. **–ï—Å–ª–∏ –Ω–µ—Ç –≤ –ö–û–ù–¢–ï–ö–°–¢–ï:** –°–æ–æ–±—â–∏ '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π BizLevel'
6. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:**
   ‚Ä¢ –°–†–ê–ó–£ —á–µ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º (–ë–ï–ó –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, —Ç–∏–ø–∞ –Ø —Å—á–∏—Ç–∞—é, –Ø –¥—É–º–∞—é, –Ø –ø–æ–Ω–∏–º–∞—é, –Ø –ø–æ–ª–∞–≥–∞—é –∏ –¥—Ä—É–≥–∏—Ö)
   ‚Ä¢ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–ï–ó –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏

## –ü—Ä–∏–º–µ—Ä—ã –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π:
‚ùå '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞'
‚ùå '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å...'
‚ùå '–ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ?'

## –í–∞–∂–Ω—ã–µ –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –≤–æ–ø—Ä–æ—Å–∞ (—Ä—É—Å—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
‚Ä¢ **–ü–†–ò–û–†–ò–¢–ï–¢ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï**: –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
‚Ä¢ **–ò—Å–ø–æ–ª—å–∑—É–π –±–∞–∑—É –∑–Ω–∞–Ω–∏–π** –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∫—É—Ä—Å–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã —Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ (–ê–π–±–µ–∫, –ê–ª–∏—è, –ê–π–¥–∞–Ω–∞, –ï—Ä–∂–∞–Ω, –ê—Ä–º–∞–Ω, –ñ—É–ª–¥—ã–∑)
‚Ä¢ –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ö–û–ù–¢–ï–ö–°–¢–ï
‚Ä¢ –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–∞ - –æ–±—ä—è—Å–Ω—è–π –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
‚Ä¢ –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
‚Ä¢ **–ò–°–ü–û–õ–¨–ó–£–ô –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï** –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ **–í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–ª–∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã (2026 –≥–æ–¥ –∏ –¥–∞–ª–µ–µ) –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö —Ü–µ–ª–µ–π, –ø–ª–∞–Ω–æ–≤, –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —Ç.–¥.** –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞—Ç—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ (2024 –∏ —Ä–∞–Ω–µ–µ) –≤ –Ω–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.

–¢—ã –ª–∏—Ü–æ —à–∫–æ–ª—ã BizLevel. –ü–æ–º–æ–≥–∞–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ!

${personaSummary ? `\n## –ü–µ—Ä—Å–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n${personaSummary}` : ''}
${memoriesText ? `\n## –õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–ø–∞–º—è—Ç—å):\n${memoriesText}` : ''}
${recentSummaries ? `\n## –ò—Ç–æ–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:\n${recentSummaries}` : ''}
${ragContext ? `\n## RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π):\n${ragContext}` : ''}
${userContextText ? `\n## –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n${userContextText}` : ''}
${levelContext ? `\n## –ö–û–ù–¢–ï–ö–°–¢ –£–†–û–ö–ê:\n${levelContext}` : ''}
${knowledgeContext ? `\n## –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô (–∫–ª–∏–µ–Ω—Ç):\n${knowledgeContext}` : ''}`;

    // Compose chat with enhanced system prompt
    const completion = await openai.chat.completions.create({
      model: Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini",
      temperature: parseFloat(Deno.env.get("OPENAI_TEMPERATURE") || "0.4"),
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        ...messages,
      ],
    });

    const assistantMessage = completion.choices[0].message;
    const usage = completion.usage; // prompt/completion/total tokens

    console.log('üîß DEBUG: –û—Ç–≤–µ—Ç –æ—Ç OpenAI:', assistantMessage.content?.substring(0, 100));

    return new Response(
      JSON.stringify({ message: assistantMessage, usage }),
      {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      },
    );
  } catch (err) {
    console.error("Leo chat function error:", err);
    return new Response(
      JSON.stringify({ error: "Internal error", details: err.message }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      },
    );
  }
}); 