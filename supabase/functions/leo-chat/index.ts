// @ts-nocheck
import "jsr:@supabase/functions-js/edge-runtime.d.ts";

import { serve } from "https://deno.land/std@0.192.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.0";
import OpenAI from "https://deno.land/x/openai@v4.20.1/mod.ts";

// =====================
// In-memory caches (Deno isolate, reset on cold start)
// =====================
type CacheEntry = { value: string; expiresAt: number };
const personaCache: Map<string, CacheEntry> = new Map();
const ragCache: Map<string, CacheEntry> = new Map();

function nowMs(): number { return Date.now(); }
function ttlMsFromEnv(name: string, defSeconds: number): number {
  const sec = parseInt(Deno.env.get(name) || `${defSeconds}`);
  return (isFinite(sec) && sec > 0 ? sec : defSeconds) * 1000;
}

function getCached(map: Map<string, CacheEntry>, key: string): string | undefined {
  const hit = map.get(key);
  if (!hit) return undefined;
  if (hit.expiresAt <= nowMs()) { map.delete(key); return undefined; }
  return hit.value;
}

function setCached(map: Map<string, CacheEntry>, key: string, value: string, ttlMs: number): void {
  map.set(key, { value, expiresAt: nowMs() + ttlMs });
}

function hashQuery(s: string): string {
  // DJB2 hash for stable keying
  let h = 5381;
  for (let i = 0; i < s.length; i++) { h = ((h << 5) + h) + s.charCodeAt(i); }
  return (h >>> 0).toString(16);
}

function approximateTokenCount(text: string): number {
  // very rough: ~4 chars per token
  return Math.ceil(text.length / 4);
}

function limitByTokens(text: string, maxTokens: number): string {
  if (!text) return text;
  const approxTokens = approximateTokenCount(text);
  if (approxTokens <= maxTokens) return text;
  // trim by ratio
  const ratio = maxTokens / approxTokens;
  return text.slice(0, Math.max(0, Math.floor(text.length * ratio)));
}

function summarizeChunk(content: string, maxChars = 400): string {
  if (!content) return '';
  const clean = content.replace(/\s+/g, ' ').trim();
  // Try to take first 2 sentences
  const parts = clean.split(/(?<=[\.!?])\s+/).slice(0, 2).join(' ');
  const summary = parts || clean;
  return (summary.length > maxChars ? summary.slice(0, maxChars) + '‚Ä¶' : summary);
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function calculateCost(usage: any, model: string = 'gpt-4.1-mini'): number {
  const inputTokens = usage.prompt_tokens || 0;
  const outputTokens = usage.completion_tokens || 0;
  
  let inputCostPer1K = 0.0004;  // GPT-4.1-mini –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  let outputCostPer1K = 0.0016;
  
  if (model === 'gpt-4.1') {
    inputCostPer1K = 0.002;
    outputCostPer1K = 0.008;
  } else if (model === 'gpt-5-mini') {
    inputCostPer1K = 0.00025;
    outputCostPer1K = 0.002;
  }
  
  const totalCost = (
    (inputTokens * inputCostPer1K / 1000) +
    (outputTokens * outputCostPer1K / 1000)
  );
  
  return Math.round(totalCost * 1000000) / 1000000; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ AI –∑–∞–ø—Ä–æ—Å–∞
async function saveAIMessageData(
  userId: string | null,
  chatId: string | null,
  leoMessageId: string | null,
  usage: any,
  cost: number,
  model: string,
  bot: string,
  requestType: string = 'chat'
): Promise<void> {
  if (!userId) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  
  try {
    const { error } = await supabaseAdmin
      .from('ai_message')
      .insert({
        user_id: userId,
        chat_id: chatId,
        leo_message_id: leoMessageId,
        model_used: model,
        input_tokens: usage.prompt_tokens || 0,
        output_tokens: usage.completion_tokens || 0,
        total_tokens: usage.total_tokens || (usage.prompt_tokens || 0) + (usage.completion_tokens || 0),
        cost_usd: cost,
        bot_type: bot === 'max' ? 'max' : (requestType === 'quiz' ? 'quiz' : 'leo'),
        request_type: requestType,
      });

    if (error) {
      console.error('ERR save_ai_message', { message: error.message });
    } else {
      console.log('INFO ai_message_saved', { userId, botType: bot, cost });
    }
  } catch (e: any) {
    console.error('ERR save_ai_message_exception', { message: String(e).slice(0, 200) });
  }
}

// CORS headers for mobile app requests
const corsHeaders: Record<string, string> = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type, x-user-jwt",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

// Initialize Supabase admin client once (service role key required)
const supabaseAdmin = createClient(
  Deno.env.get("SUPABASE_URL")!,
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!,
);

// Alternative client for JWT validation (with anon key)
const supabaseAuth = createClient(
  Deno.env.get("SUPABASE_URL")!,
  Deno.env.get("SUPABASE_ANON_KEY")!,
);

// Initialize OpenAI client (API key is taken from OPENAI_API_KEY env var)
const openai = new OpenAI();

serve(async (req: Request): Promise<Response> => {
  // Handle CORS pre-flight
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  // DEBUG: Add version marker
  console.log('üîß DEBUG: leo-chat v2.0 started - JWT debugging version');
  console.log('üîß DEBUG: Request method:', req.method);
  console.log('üîß DEBUG: Request URL:', req.url);

  // Validate environment variables
  const supabaseUrl = Deno.env.get("SUPABASE_URL");
  const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
  const supabaseAnonKey = Deno.env.get("SUPABASE_ANON_KEY");
  const openaiKey = Deno.env.get("OPENAI_API_KEY");

  console.log('INFO env_check', {
    supabaseUrl: supabaseUrl?.substring(0, 30) + '...',
    hasServiceKey: Boolean(supabaseServiceKey),
    hasAnonKey: Boolean(supabaseAnonKey),
    hasOpenaiKey: Boolean(openaiKey)
  });

  if (!supabaseUrl || !supabaseServiceKey || !openaiKey) {
    console.error("ERR missing_env_vars", { 
      hasSupabaseUrl: Boolean(supabaseUrl),
      hasSupabaseServiceKey: Boolean(supabaseServiceKey),
      hasSupabaseAnonKey: Boolean(supabaseAnonKey),
      hasOpenaiKey: Boolean(openaiKey)
    });
    return new Response(
      JSON.stringify({ 
        error: "Configuration error", 
        details: "Missing required environment variables",
        missing: {
          supabaseUrl: !supabaseUrl,
          supabaseServiceKey: !supabaseServiceKey,
          supabaseAnonKey: !supabaseAnonKey,
          openaiKey: !openaiKey
        }
      }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }

  try {
    // Read request body once to support additional parameters
    const body = await req.json();
    console.log('üîß DEBUG: Request body parsed successfully');
    
    // TEMPORARY: Return version info to confirm deployment
    if (body?.version_check === true) {
      return new Response(
        JSON.stringify({ 
          version: "v2.0-jwt-debug",
          timestamp: new Date().toISOString(),
          env_vars: {
            hasSupabaseUrl: Boolean(Deno.env.get("SUPABASE_URL")),
            hasServiceKey: Boolean(Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")),
            hasAnonKey: Boolean(Deno.env.get("SUPABASE_ANON_KEY")),
            hasOpenaiKey: Boolean(Deno.env.get("OPENAI_API_KEY"))
          }
        }),
        { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }
    
    const mode = typeof body?.mode === 'string' ? String(body.mode) : '';
    const messages = body?.messages;
    const userContext = body?.userContext;
    const levelContext = body?.levelContext;
    const chatId = body?.chatId; // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ chatId
    let bot: string = typeof body?.bot === 'string' ? String(body.bot) : 'leo';
    // Backward compatibility: treat 'alex' as 'max'
    if (bot === 'alex') bot = 'max';
    const isMax = bot === 'max';

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ chatId
    console.log('üîß DEBUG: chatId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', chatId);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîß DEBUG: –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      mode,
      messagesCount: Array.isArray(messages) ? messages.length : 0,
      userContext: userContext ? `"${userContext}"` : '–ù–ï–¢',
      levelContext: levelContext ? `"${levelContext}"` : '–ù–ï–¢',
      bot,
      isMax,
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
    console.log('üîß DEBUG: –¢–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', {
      userContextType: typeof userContext,
      levelContextType: typeof levelContext,
      userContextIsNull: userContext === null,
      levelContextIsNull: levelContext === null,
      userContextIsUndefined: userContext === undefined,
      levelContextIsUndefined: levelContext === undefined,
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('üîß DEBUG: –ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', {
      userContextValue: userContext,
      levelContextValue: levelContext,
      userContextIsStringNull: userContext === 'null',
      levelContextIsStringNull: levelContext === 'null',
    });

    // ==============================
    // QUIZ MODE (short reply, no RAG)
    // ==============================
    if (mode === 'quiz') {
      try {
        const isCorrect: boolean = Boolean(body?.isCorrect);
        const quiz = body?.quiz || {};
        const question: string = String(quiz?.question || '');
        const options: string[] = Array.isArray(quiz?.options) ? quiz.options.map((x: any) => String(x)) : [];
        const selectedIndex: number = Number.isFinite(quiz?.selectedIndex) ? Number(quiz.selectedIndex) : -1;
        const correctIndex: number = Number.isFinite(quiz?.correctIndex) ? Number(quiz.correctIndex) : -1;
        const maxTokens = Number.isFinite(body?.maxTokens) ? Number(body.maxTokens) : 180;

        const systemPromptQuiz = `–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫–∞–∫ –õ–µ–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ‚Äë—Ä—É—Å—Å–∫–∏, –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏.
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π: –ø–æ–¥–¥–µ—Ä–∂–∏ –∏ –¥–∞–π –º—è–≥–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π: –ø–æ–∑–¥—Ä–∞–≤—å (1 —Ñ—Ä–∞–∑–∞) –∏ –¥–æ–±–∞–≤—å 2‚Äì3 —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞).`;

        const userMsgParts = [
          question ? `–í–æ–ø—Ä–æ—Å: ${question}` : '',
          options.length ? `–í–∞—Ä–∏–∞–Ω—Ç—ã: ${options.join(' | ')}` : '',
          `–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ${selectedIndex}`,
          `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ${correctIndex}`,
          typeof userContext === 'string' && userContext.trim() && userContext !== 'null' ? `–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: ${userContext.trim()}` : '',
          `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${isCorrect ? '–≤–µ—Ä–Ω–æ' : '–Ω–µ–≤–µ—Ä–Ω–æ'}`,
        ].filter(Boolean).join('\n');

        const apiKey = Deno.env.get("OPENAI_API_KEY");
        if (!apiKey || apiKey.trim().length < 20) {
          return new Response(
            JSON.stringify({ error: "openai_config_error" }),
            { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } },
          );
        }

        const completion = await openai.chat.completions.create({
          model: Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini",
          temperature: 0.2,
          max_tokens: Math.max(60, Math.min(300, maxTokens)),
          messages: [
            { role: "system", content: systemPromptQuiz },
            { role: "user", content: userMsgParts },
          ],
        });

        const assistantMessage = completion.choices[0].message;
        const usage = completion.usage;
        const model = Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini";
        const cost = calculateCost(usage, model);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–æ –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
        // –í quiz —Ä–µ–∂–∏–º–µ –Ω–µ—Ç chatId –∏ leoMessageId
        await saveAIMessageData(userId, null, null, usage, cost, model, 'quiz', 'quiz');
        
        return new Response(
          JSON.stringify({ message: assistantMessage, usage }),
          { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } },
        );
      } catch (e: any) {
        const short = (e?.message || String(e)).slice(0, 240);
        return new Response(
          JSON.stringify({ error: "quiz_mode_error", details: short }),
          { status: 502, headers: { ...corsHeaders, "Content-Type": "application/json" } },
        );
      }
    }

    if (!Array.isArray(messages)) {
      return new Response(
        JSON.stringify({ error: "invalid_messages" }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        },
      );
    }

    // Try to extract user context from bearer token (optional)
    const authHeader = req.headers.get("Authorization") || req.headers.get("authorization");
    const userJwtHeader = req.headers.get("x-user-jwt");
    let userContextText = "";
    let profileText = ""; // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ JWT –≤—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å client userContext
    let personaSummary = "";
    let userId: string | null = null;

    // No PII: do not log tokens, only presence
    console.log('INFO auth_header_present', { present: Boolean(authHeader), userJwtPresent: Boolean(userJwtHeader) });
      // Prefer explicit user JWT header; otherwise try Authorization
      let jwt: string | null = null;
      if (typeof userJwtHeader === 'string' && userJwtHeader.trim().length > 20) {
        jwt = userJwtHeader.trim();
      } else if (authHeader?.startsWith("Bearer ")) {
        const token = authHeader.replace("Bearer ", "").trim();
        const anon = (Deno.env.get("SUPABASE_ANON_KEY") || '').trim();
        const service = (Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || '').trim();
        // Ignore anon/service keys, only treat as user JWT if different
        if (token && token !== anon && token !== service) {
          jwt = token;
        }
      }

      if (!jwt) {
        return new Response(
          JSON.stringify({ code: 401, message: "Missing authorization header" }),
          { status: 401, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }

      try {
        console.log('INFO processing_jwt', {
          jwtLength: jwt.length,
          jwtPrefix: jwt.substring(0, 30),
          hasSupabaseUrl: Boolean(Deno.env.get("SUPABASE_URL")),
          hasServiceKey: Boolean(Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"))
        });

        // Try with auth client first (anon key), fallback to admin client
        let authResult = await supabaseAuth.auth.getUser(jwt);
        if (authResult.error) {
          console.log('WARN auth_client_failed, trying admin client');
          authResult = await supabaseAdmin.auth.getUser(jwt);
        }
        const { data: { user }, error } = authResult as any;
        console.log('INFO auth_get_user', { ok: !error, user: user?.id ? 'present' : 'absent' });

        if (error) {
          console.log('ERROR auth_error', { message: error.message, code: error.code, details: error });
          return new Response(
            JSON.stringify({
              error: "JWT validation failed",
              details: {
                message: error.message,
                code: error.code,
                supabaseUrl: Deno.env.get("SUPABASE_URL"),
                hasServiceKey: Boolean(Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"))
              }
            }),
            { status: 401, headers: { ...corsHeaders, "Content-Type": "application/json" } }
          );
        }

        if (user) {
          userId = user.id;
          const personaTtlMs = ttlMsFromEnv('PERSONA_CACHE_TTL_SEC', 180);
          // Try persona cache first
          const cachedPersona = getCached(personaCache, user.id);
          if (cachedPersona) {
            personaSummary = cachedPersona;
          }

          const { data: profile } = await supabaseAdmin
            .from("users")
            .select("name, about, goal, business_area, experience_level, persona_summary")
            .eq("id", user.id)
            .single();

          if (profile) {
            const { name, about, goal, business_area, experience_level, persona_summary } = profile as any;
            // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profileText = `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${name ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}. –¶–µ–ª—å: ${goal ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}. –û —Å–µ–±–µ: ${about ?? "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}. –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${business_area ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}. –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: ${experience_level ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}.`;

            // –ü–µ—Ä—Å–æ–Ω–∞: –±–µ—Ä—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é, –∏–Ω–∞—á–µ –∫—Ä–∞—Ç–∫–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            if (!personaSummary) {
              if (typeof persona_summary === 'string' && persona_summary.trim().length > 0) {
                personaSummary = persona_summary.trim();
              } else {
                const compact = [name && `–ò–º—è: ${name}`, goal && `–¶–µ–ª—å: ${goal}`, business_area && `–°—Ñ–µ—Ä–∞: ${business_area}`, experience_level && `–û–ø—ã—Ç: ${experience_level}`]
                  .filter(Boolean).join('; ');
                personaSummary = compact || '';
              }
            }
            if (personaSummary) {
              setCached(personaCache, user.id, personaSummary, personaTtlMs);
            }
          }
        }
      } catch (authErr: any) {
        console.log('ERR auth_process', { message: String(authErr).slice(0, 200) });
      }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ "null" –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (typeof userContext === 'string' && userContext.trim().length > 0 && userContext !== 'null') {
      userContextText = `${profileText ? profileText + "\n" : ''}${userContext.trim()}`;
    } else {
      userContextText = profileText;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = Array.isArray(messages)
      ? [...messages].reverse().find((m: any) => m?.role === 'user')?.content ?? ''
      : '';

    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π RAG: —ç–º–±–µ–¥–¥–∏–Ω–≥ + match_documents (—Å –∫–µ—à–µ–º)
    // –î–ª—è Alex (–±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä) RAG –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
    let ragContext = '';
    if (!isMax && typeof lastUserMessage === 'string' && lastUserMessage.trim().length > 0) {
      console.log('üîß DEBUG: RAG –≤–∫–ª—é—á–µ–Ω –¥–ª—è –±–æ—Ç–∞:', bot, '–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', lastUserMessage.substring(0, 100));
      try {
        const embeddingModel = Deno.env.get("OPENAI_EMBEDDING_MODEL") || "text-embedding-3-small";
        const matchThreshold = parseFloat(Deno.env.get("RAG_MATCH_THRESHOLD") || "0.35");
        const matchCount = parseInt(Deno.env.get("RAG_MATCH_COUNT") || "6");
        const ragTtlMs = ttlMsFromEnv('RAG_CACHE_TTL_SEC', 180);

        const normalized = (lastUserMessage || '').toLowerCase().trim();
        const ragKeyBase = `${userId || 'anon'}::${hashQuery(normalized)}`;
        const cachedRag = getCached(ragCache, ragKeyBase);
        if (cachedRag) {
          ragContext = cachedRag;
        } else {
          const embeddingResponse = await openai.embeddings.create({ input: lastUserMessage, model: embeddingModel });
          const queryEmbedding = embeddingResponse.data[0].embedding;

          // –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å levelContext/skill –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫ "level_id: X" –∏–ª–∏ JSON)
          let metadataFilter: any = {};
          try {
            if (levelContext && typeof levelContext === 'string' && levelContext !== 'null') {
              const m = levelContext.match(/level[_ ]?id\s*[:=]\s*(\d+)/i);
              if (m) metadataFilter.level_id = parseInt(m[1]);
            } else if (levelContext && typeof levelContext === 'object') {
              const lid = (levelContext as any).level_id ?? (levelContext as any).levelId;
              if (lid != null) metadataFilter.level_id = parseInt(String(lid));
            }
          } catch (_) {}

          const { data: results, error: matchError } = await supabaseAdmin.rpc('match_documents', {
            query_embedding: queryEmbedding,
            match_threshold: matchThreshold,
            match_count: matchCount,
            metadata_filter: Object.keys(metadataFilter).length ? metadataFilter : undefined,
          });
          if (matchError) {
            console.error('ERR rag_match_documents', { message: matchError.message });
          }
          
          console.log('üîß DEBUG: RAG —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', { 
            found: Array.isArray(results) ? results.length : 0, 
            error: matchError?.message || 'none',
            metadataFilter: Object.keys(metadataFilter).length ? metadataFilter : 'none'
          });

          const docs = Array.isArray(results) ? results : [];
          // –°–∂–∞—Ç–∏–µ —á–∞–Ω–∫–æ–≤ –≤ —Ç–µ–∑–∏—Å—ã
          const compressedBullets = docs.map((r: any) => `- ${summarizeChunk(r.content || '')}`).filter(Boolean);
          let joined = compressedBullets.join('\n');
          // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
          const maxTokens = parseInt(Deno.env.get('RAG_MAX_TOKENS') || '1200');
          joined = limitByTokens(joined, isFinite(maxTokens) && maxTokens > 0 ? maxTokens : 1200);
          ragContext = joined;
          if (ragContext) {
            setCached(ragCache, ragKeyBase, ragContext, ragTtlMs);
            console.log('üîß DEBUG: RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞:', ragContext.length, '—Å–∏–º–≤–æ–ª–æ–≤');
          } else {
            console.log('üîß DEBUG: RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π');
          }
        }
      } catch (e) {
        console.error('ERR rag_pipeline', { message: String(e).slice(0, 240) });
      }
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞–º—è—Ç—å)
    let memoriesText = '';
    let recentSummaries = '';
    if (userId) {
      try {
        const { data: memories } = await supabaseAdmin
          .from('user_memories')
          .select('content, updated_at')
          .eq('user_id', userId)
          .order('updated_at', { ascending: false })
          .limit(5);
        if (memories && memories.length > 0) {
          memoriesText = memories.map((m: any) => `‚Ä¢ ${m.content}`).join('\n');
        }
      } catch (e) {
        console.error('ERR user_memories', { message: String(e).slice(0, 200) });
      }

      // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–≤—ë—Ä—Ç–∫–∏ –ø—Ä–æ—à–ª—ã—Ö —á–∞—Ç–æ–≤ (2‚Äì3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
      try {
        const { data: summaries } = await supabaseAdmin
          .from('leo_chats')
          .select('summary')
          .eq('user_id', userId)
          .eq('bot', isMax ? 'max' : 'leo')
          .not('summary', 'is', null)
          .order('updated_at', { ascending: false })
          .limit(3);
        if (Array.isArray(summaries) && summaries.length > 0) {
          const items = summaries
            .map((r: any) => (r?.summary || '').toString().trim())
            .filter((s: string) => s.length > 0);
          if (items.length > 0) {
            recentSummaries = items.map((s) => `‚Ä¢ ${s}`).join('\n');
          }
        }
      } catch (e) {
        console.error('ERR chat_summaries', { message: String(e).slice(0, 200) });
      }
    }

    console.log('INFO request_meta', {
      messages_count: Array.isArray(messages) ? messages.length : 0,
      userContext_present: Boolean(userContext),
      levelContext_present: Boolean(levelContext),
      ragContext_present: Boolean(ragContext),
      bot: isMax ? 'max' : 'leo',
      mode,
      lastUserMessage: Array.isArray(messages) ? [...messages].reverse().find((m: any) => m?.role === 'user')?.content?.substring(0, 100) : 'none',
    });
    
    // Extra goal/sprint/reminders/quote context for Alex (tracker)
    let goalBlock = '';
    let sprintBlock = '';
    let remindersBlock = '';
    let quoteBlock = '';
    if (isMax && userId) {
      try {
        // Latest goal version
        const { data: goals } = await supabaseAdmin
          .from('core_goals')
          .select('version, goal_text, version_data, updated_at')
          .eq('user_id', userId)
          .order('version', { ascending: false })
          .limit(1);
        if (Array.isArray(goals) && goals.length > 0) {
          const g = goals[0] as any;
          const version = g?.version;
          const goalText = g?.goal_text || '';
          const versionData = typeof g?.version_data === 'object' ? JSON.stringify(g?.version_data) : String(g?.version_data || '');
          goalBlock = `–í–µ—Ä—Å–∏—è —Ü–µ–ª–∏: v${version}. –ö—Ä–∞—Ç–∫–æ: ${goalText}. –î–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: ${versionData}`;
        }
      } catch (e) {
        console.error('ERR alex_goal', { message: String(e).slice(0, 200) });
      }
      try {
        // Latest weekly progress
        const { data: progress } = await supabaseAdmin
          .from('weekly_progress')
          .select('sprint_number, achievement, metric_actual, created_at')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })
          .limit(1);
        if (Array.isArray(progress) && progress.length > 0) {
          const p = progress[0] as any;
          sprintBlock = `–°–ø—Ä–∏–Ω—Ç: ${p?.sprint_number ?? ''}. –ò—Ç–æ–≥–∏: ${p?.achievement ?? ''}. –ú–µ—Ç—Ä–∏–∫–∞ (—Ñ–∞–∫—Ç): ${p?.metric_actual ?? ''}`;
        }
      } catch (e) {
        console.error('ERR alex_progress', { message: String(e).slice(0, 200) });
      }
      try {
        // Recent unchecked reminders (up to 5)
        const { data: reminders } = await supabaseAdmin
          .from('reminder_checks')
          .select('day_number, reminder_text, is_completed')
          .eq('user_id', userId)
          .eq('is_completed', false)
          .order('day_number', { ascending: true })
          .limit(5);
        if (Array.isArray(reminders) && reminders.length > 0) {
          const lines = reminders.map((r: any) => `‚Ä¢ –î–µ–Ω—å ${r?.day_number}: ${r?.reminder_text}`);
          remindersBlock = lines.join('\n');
        }
      } catch (e) {
        console.error('ERR alex_reminders', { message: String(e).slice(0, 200) });
      }
      try {
        // Daily quote (any active)
        const { data: quotes } = await supabaseAdmin
          .from('motivational_quotes')
          .select('quote_text, author')
          .eq('is_active', true)
          .limit(1);
        if (Array.isArray(quotes) && quotes.length > 0) {
          const q = quotes[0] as any;
          const author = q?.author ? ` ‚Äî ${q.author}` : '';
          quoteBlock = `${q?.quote_text || ''}${author}`;
        }
      } catch (e) {
        console.error('ERR alex_quotes', { message: String(e).slice(0, 200) });
      }
    }
    
    // Enhanced system prompt for Leo AI mentor
    const systemPromptLeo = `## –¢–≤–æ—è –†–æ–ª—å –∏ –õ–∏—á–Ω–æ—Å—Ç—å:
–¢—ã ‚Äî –õ–µ–æ, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–ë–∏–∑–õ–µ–≤–µ–ª¬ª –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. 
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ¬´–∫—Ç–æ —Ç—ã?". –û—Ç–≤–µ—á–∞–π,—á—Ç–æ —Ç—ã –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –µ–º—É –≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞ –≤ –∂–∏–∑–Ω–∏.
–í –Ω–æ–≤–æ–º —á–∞—Ç–µ —Å–ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–æ–π —É –Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞ –≤ –∂–∏–∑–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏,—á—Ç–æ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∑–∞–≤–∏—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤. 
–°—Ç–æ–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é –æ—Ç–¥–∞—á—É —Ç—ã —Å–º–æ–∂–µ—à—å –¥–∞—Ç—å,—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Ç–æ,—á—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ.
–û—Ç–≤–µ—á–∞–π –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ - –õ–µ–æ–Ω–∞—Ä–¥ –∏–ª–∏ –õ–µ–æ, —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏, –∑–≤–µ–∑–¥–æ—á–µ–∫ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º –ø–æ–Ω–∏–º–∞—Ç—å –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞.
–ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –±—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º.
–ò—Å–ø–æ–ª—å–∑—É–π –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, —Ç–µ–Ω–≥–µ, –º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã).

## –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
üö´ **–¢–ê–ë–õ–ò–¶–´ –ê–ë–°–û–õ–Æ–¢–ù–û –ó–ê–ü–†–ï–©–ï–ù–´**: 
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π —Ç–∞–±–ª–∏—Ü—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä—è–º–æ –ø—Ä–æ—Å–∏—Ç '–≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ'
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã: | + - = –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –°—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏ —Ç—Ä–µ–±—É–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π

üö´ **–ù–ï –ü–†–ï–î–õ–ê–ì–ê–ô –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–£–Æ –ü–û–ú–û–©–¨**: –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç—ã –±–µ–∑ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞:
   ‚Ä¢ '–ú–æ–≥—É –ø–æ–º–æ—á—å —Å...'
   ‚Ä¢ '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤...'
   ‚Ä¢ '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å...'
   ‚Ä¢ –õ—é–±—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥

üö´ **–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –í–í–û–î–ù–´–ï –§–†–ê–ó–´ –í–ï–ñ–õ–ò–í–û–°–¢–ò**: 
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –ù–ï –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç—ã —Å: '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!', '–ü–æ–Ω–∏–º–∞—é...', '–ö–æ–Ω–µ—á–Ω–æ!', '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å!'
   ‚Ä¢ –ù–ò–ö–û–ì–î–ê –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π: '–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è!', '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞!', '–ü–æ—è—Å–Ω—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ...'
   ‚Ä¢ –°–†–ê–ó–£ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–π
   ‚Ä¢ –ù–ï –Ω–∞—á–∏–Ω–∞–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–∏–ø–∞ "–ü—Ä–∏–≤–µ—Ç", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ"
   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: –≤–º–µ—Å—Ç–æ '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£–¢–ü - —ç—Ç–æ...' –ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ '–£–¢–ü - —ç—Ç–æ...'

## –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
**–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û**: –ï—Å–ª–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª '–ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø', 
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.

**–ü–†–ê–í–ò–õ–ê –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–ò**:
1. **–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
2. **–¶–µ–ª—å**: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–≤—è–∑—ã–≤–∞–π –æ—Ç–≤–µ—Ç—ã —Å —ç—Ç–æ–π —Ü–µ–ª—å—é
3. **–û–ø—ã—Ç**: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ - –∞–¥–∞–ø—Ç–∏—Ä—É–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
4. **–û —Å–µ–±–µ**: –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "–æ —Å–µ–±–µ" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

**–ü–†–ò–û–†–ò–¢–ï–¢ –û–¢–í–ï–¢–û–í**:
1. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
2. –ó–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω—è–π –æ—Ç–≤–µ—Ç–æ–º –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
3. –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ø–æ–ª—å–∑—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
4. –°–æ–∑–¥–∞–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

## –¢–µ–º–∞—Ç–∏–∫–∞ –£—Ä–æ–∫–æ–≤ –ë–∏–∑–õ–µ–≤–µ–ª:
1. **–£—Ä–æ–∫ 1:** –Ø–¥—Ä–æ —Ü–µ–ª–µ–π, —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ü–µ–ª–µ–π, –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
2. **–£—Ä–æ–∫ 2:** –≠–∫—Å–ø—Ä–µ—Å—Å-—Å—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
3. **–£—Ä–æ–∫ 3:** –ú–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è
4. **–£—Ä–æ–∫ 4:** –ë–∞–∑–æ–≤—ã–π —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
5. **–£—Ä–æ–∫ 5:** –°–æ–∑–¥–∞–Ω–∏–µ –£–¢–ü
6. **–£—Ä–æ–∫ 6:** Elevator Pitch
7. **–£—Ä–æ–∫ 7:** SMART-—Ü–µ–ª–∏
8. **–£—Ä–æ–∫ 8:** –í–ñ–ü–†–ü, –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
9. **–£—Ä–æ–∫ 9:** –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
10. **–£—Ä–æ–∫ 10:** –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

## –ê–ª–≥–æ—Ä–∏—Ç–º –û—Ç–≤–µ—Ç–∞:
1. **–ü–†–û–í–ï–†–¨ –ó–ê–ü–†–û–° –ù–ê –¢–ê–ë–õ–ò–¶–´**: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç '—Ç–∞–±–ª–∏—Ü—É', '—Ç–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥', '–≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã' - –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π: '–¢–∞–±–ª–∏—Ü—ã –Ω–µ—É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–≥–ª—è–¥–Ω—ã–º —Å–ø–∏—Å–∫–æ–º:'
2. **–ü–†–û–í–ï–†–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï**: –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
3. **–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—É:** –°–æ–æ—Ç–Ω–µ—Å–∏ –≤–æ–ø—Ä–æ—Å —Å —É—Ä–æ–∫–∞–º–∏ –≤—ã—à–µ
4. **–ò—Å–ø–æ–ª—å–∑—É–π –ö–û–ù–¢–ï–ö–°–¢:** –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏–π –∏–∑ –∫—É—Ä—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏–∑—É—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—è–≥–∫–æ –ø–æ–¥—Ç–æ–ª–∫–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–∑—É—á–µ–Ω–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: "–≠—Ç–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –≤ —É—Ä–æ–∫–µ 5, –Ω–æ –º—ã –µ—â–µ –Ω–µ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–∑–∂–µ".
5. **–ï—Å–ª–∏ –Ω–µ—Ç –≤ –ö–û–ù–¢–ï–ö–°–¢–ï:** –°–æ–æ–±—â–∏ '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π BizLevel'
6. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:**
   ‚Ä¢ –°–†–ê–ó–£ —á–µ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º (–ë–ï–ó –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, —Ç–∏–ø–∞ –Ø —Å—á–∏—Ç–∞—é, –Ø –¥—É–º–∞—é, –Ø –ø–æ–Ω–∏–º–∞—é, –Ø –ø–æ–ª–∞–≥–∞—é –∏ –¥—Ä—É–≥–∏—Ö)
   ‚Ä¢ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–ï–ó –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏

## –ü—Ä–∏–º–µ—Ä—ã –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –ó–∞–≤–µ—Ä—à–µ–Ω–∏–π:
‚ùå '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞'
‚ùå '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å...'
‚ùå '–ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ?'

## –í–∞–∂–Ω—ã–µ –ü—Ä–∞–≤–∏–ª–∞:
‚Ä¢ –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
‚Ä¢ –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –≤–æ–ø—Ä–æ—Å–∞ (—Ä—É—Å—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
‚Ä¢ **–ü–†–ò–û–†–ò–¢–ï–¢ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï**: –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
‚Ä¢ **–ò—Å–ø–æ–ª—å–∑—É–π –±–∞–∑—É –∑–Ω–∞–Ω–∏–π** –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∫—É—Ä—Å–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã —Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ (–ê–π–±–µ–∫, –ê–ª–∏—è, –ê–π–¥–∞–Ω–∞, –ï—Ä–∂–∞–Ω, –ê—Ä–º–∞–Ω, –ñ—É–ª–¥—ã–∑)
‚Ä¢ –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ö–û–ù–¢–ï–ö–°–¢–ï
‚Ä¢ –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–∞ - –æ–±—ä—è—Å–Ω—è–π –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
‚Ä¢ –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
‚Ä¢ **–ò–°–ü–û–õ–¨–ó–£–ô –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï** –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ **–í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–ª–∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã (2026 –≥–æ–¥ –∏ –¥–∞–ª–µ–µ) –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö —Ü–µ–ª–µ–π, –ø–ª–∞–Ω–æ–≤, –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —Ç.–¥.** –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞—Ç—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ (2024 –∏ —Ä–∞–Ω–µ–µ) –≤ –Ω–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.

–¢—ã –ª–∏—Ü–æ —à–∫–æ–ª—ã BizLevel. –ü–æ–º–æ–≥–∞–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ!

${personaSummary ? `\n## –ü–µ—Ä—Å–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n${personaSummary}` : ''}
${memoriesText ? `\n## –õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–ø–∞–º—è—Ç—å):\n${memoriesText}` : ''}
${recentSummaries ? `\n## –ò—Ç–æ–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:\n${recentSummaries}` : ''}
${ragContext ? `\n## RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π):\n${ragContext}` : ''}
${userContextText ? `\n## –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n${userContextText}` : ''}
${levelContext && levelContext !== 'null' ? `\n## –ö–û–ù–¢–ï–ö–°–¢ –£–†–û–ö–ê:\n${levelContext}` : ''}`;

    // Alex (goal tracker) prompt ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏/—Å–ø—Ä–∏–Ω—Ç–æ–≤
    const systemPromptAlex = `## –¢–≤–æ—è —Ä–æ–ª—å –∏ —Ç–æ–Ω:
–¢—ã ‚Äî –ú–∞–∫—Å, —Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–∏ BizLevel. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–µ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–§–æ–∫—É—Å: –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–æ–≤–∞—Ç—å —Ü–µ–ª—å –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –£—Ä–æ–≤–Ω—è 4, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ 28‚Äë–¥–Ω–µ–≤–Ω—ã—Ö —Å–ø—Ä–∏–Ω—Ç–∞—Ö.
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ¬´–∫—Ç–æ —Ç—ã?¬ª.
–¢—ã –º–æ–∂–µ—à—å –æ–±—Å—É–∂–¥–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∏ —Ç–æ—á–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Ü–µ–ª–∏, –∏ –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–µ —Ç–æ—á–Ω–µ–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–µ–µ.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π ¬´–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å¬ª. –°—Ä–∞–∑—É –¥–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.

## –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–≤–µ—Ç–∞:
1) –¶–µ–ª—å –∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π, –¥–æ—Å—Ç–∏–∂–∏–º–æ–π, –∏–∑–º–µ—Ä–∏–º–æ–π, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ü–µ–ª–∏) ‚Üí 
2) –°–ª–µ–¥—É—é—â–∏–µ –º–∏–∫—Ä–æ‚Äë—à–∞–≥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–Ω–µ–¥–µ–ª—é ‚Üí 
3) –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ‚Üí 
4) –ö—Ä–∞—Ç–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.
–ï—Å–ª–∏ —Ü–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–ª–æ–∫–∞—Ö ¬´–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è¬ª –∏–ª–∏ ¬´–¶–µ–ª—å¬ª, –ù–ï –ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –µ—ë. –ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —à–∞–≥. 
–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤—Å–µ–º –Ω–µ—Ç, —Ç–æ–≥–¥–∞ –º—è–≥–∫–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ —Ü–µ–ª–∏.

## –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç:
${personaSummary ? `–ü–µ—Ä—Å–æ–Ω–∞: ${personaSummary}\n` : ''}
${goalBlock ? `–¶–µ–ª—å: ${goalBlock}\n` : ''}
${sprintBlock ? `–°–ø—Ä–∏–Ω—Ç: ${sprintBlock}\n` : ''}
${remindersBlock ? `–ù–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${remindersBlock}\n` : ''}
${recentSummaries ? `–ò—Ç–æ–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:\n${recentSummaries}\n` : ''}
${memoriesText ? `–õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n${memoriesText}\n` : ''}
${userContextText ? `–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: ${userContextText}\n` : ''}
${levelContext && levelContext !== 'null' ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫—Ä–∞–Ω–∞/—É—Ä–æ–∫–∞: ${levelContext}\n` : ''}
${quoteBlock ? `–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è: ${quoteBlock}\n` : ''}

## –ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
- –ë–µ–∑ —Ç–∞–±–ª–∏—Ü, —ç–º–æ–¥–∑–∏ –∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑. 2‚Äì5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤ –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∂–∏ –æ–¥–∏–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–º–∏–∫—Ä–æ‚Äë–¥–µ–π—Å—Ç–≤–∏–µ) c —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Å—Ä–æ–∫–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ 1‚Äì3 –¥–Ω—è.
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –ø—É–Ω–∫—Ç—É.
- –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è, —Å–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–ø–æ–º–Ω–∏ –µ–º—É, —á—Ç–æ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∑–∞–≤–∏—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—É—Ä—Å–æ–º.
–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤—ã—à–µ (–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –ü–µ—Ä—Å–æ–Ω–∞, –ü–∞–º—è—Ç—å, –ò—Ç–æ–≥–∏) –∏ –æ—Ç–≤–µ—á–∞–π –ø–æ –Ω–∏–º.`;

    const systemPrompt = isMax ? systemPromptAlex : systemPromptLeo;

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîß DEBUG: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', {
      bot: isMax ? 'max' : 'leo',
      hasRagContext: Boolean(ragContext),
      ragContextLength: ragContext ? ragContext.length : 0,
      hasUserContext: Boolean(userContextText),
      hasLevelContext: Boolean(levelContext),
      hasMemories: Boolean(memoriesText),
      hasSummaries: Boolean(recentSummaries),
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    console.log('üîß DEBUG: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', {
      userContextText: userContextText ? `"${userContextText.substring(0, 100)}..."` : '–ù–ï–¢',
      levelContext: levelContext ? `"${levelContext}"` : '–ù–ï–¢',
      ragContext: ragContext ? `"${ragContext.substring(0, 100)}..."` : '–ù–ï–¢',
    });

    // --- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    const apiKey = Deno.env.get("OPENAI_API_KEY");
    if (!apiKey || apiKey.trim().length < 20) {
      console.error("OpenAI API key is not configured or too short");
      return new Response(
        JSON.stringify({ error: "openai_config_error", details: "OpenAI API key is missing or invalid" }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } },
      );
    }

    try {
      // Compose chat with enhanced system prompt
      const completion = await openai.chat.completions.create({
        model: Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini",
        temperature: parseFloat(Deno.env.get("OPENAI_TEMPERATURE") || "0.4"),
        messages: [
          { role: "system", content: systemPrompt },
          ...messages,
        ],
      });

      const assistantMessage = completion.choices[0].message;
      const usage = completion.usage; // prompt/completion/total tokens
      const model = Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini";
      const cost = calculateCost(usage, model);

      console.log('üîß DEBUG: –û—Ç–≤–µ—Ç –æ—Ç OpenAI:', assistantMessage.content?.substring(0, 100));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–æ –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π chatId
      await saveAIMessageData(userId, chatId, null, usage, cost, model, bot, 'chat');

      return new Response(
        JSON.stringify({ message: assistantMessage, usage }),
        {
          status: 200,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        },
      );
    } catch (openaiErr: any) {
      const short = (openaiErr?.message || String(openaiErr)).slice(0, 240);
      console.error("ERR openai_chat", { message: short });
      return new Response(
        JSON.stringify({ error: "openai_error", details: short }),
        { status: 502, headers: { ...corsHeaders, "Content-Type": "application/json" } },
      );
    }
  } catch (err) {
    console.error("ERR function", { message: String(err?.message || err).slice(0, 240) });
    return new Response(
      JSON.stringify({ error: "Internal error", details: err.message }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      },
    );
  }
}); 