// @ts-nocheck
import "jsr:@supabase/functions-js/edge-runtime.d.ts";

import { serve } from "https://deno.land/std@0.192.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.0";
import OpenAI from "https://deno.land/x/openai@v4.20.1/mod.ts";

// =====================
// In-memory caches (Deno isolate, reset on cold start)
// =====================
type CacheEntry = { value: string; expiresAt: number };
const personaCache: Map<string, CacheEntry> = new Map();
const ragCache: Map<string, CacheEntry> = new Map();

function nowMs(): number { return Date.now(); }
function ttlMsFromEnv(name: string, defSeconds: number): number {
  const sec = parseInt(Deno.env.get(name) || `${defSeconds}`);
  return (isFinite(sec) && sec > 0 ? sec : defSeconds) * 1000;
}

function getCached(map: Map<string, CacheEntry>, key: string): string | undefined {
  const hit = map.get(key);
  if (!hit) return undefined;
  if (hit.expiresAt <= nowMs()) { map.delete(key); return undefined; }
  return hit.value;
}

function setCached(map: Map<string, CacheEntry>, key: string, value: string, ttlMs: number): void {
  map.set(key, { value, expiresAt: nowMs() + ttlMs });
}

function hashQuery(s: string): string {
  // DJB2 hash for stable keying
  let h = 5381;
  for (let i = 0; i < s.length; i++) { h = ((h << 5) + h) + s.charCodeAt(i); }
  return (h >>> 0).toString(16);
}

function approximateTokenCount(text: string): number {
  // very rough: ~4 chars per token
  return Math.ceil(text.length / 4);
}

function limitByTokens(text: string, maxTokens: number): string {
  if (!text) return text;
  const approxTokens = approximateTokenCount(text);
  if (approxTokens <= maxTokens) return text;
  // trim by ratio
  const ratio = maxTokens / approxTokens;
  return text.slice(0, Math.max(0, Math.floor(text.length * ratio)));
}

function summarizeChunk(content: string, maxChars = 400): string {
  if (!content) return '';
  const clean = content.replace(/\s+/g, ' ').trim();
  // Try to take first 2 sentences
  const parts = clean.split(/(?<=[\.!?])\s+/).slice(0, 2).join(' ');
  const summary = parts || clean;
  return (summary.length > maxChars ? summary.slice(0, maxChars) + '‚Ä¶' : summary);
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function calculateCost(usage: any, model: string = 'gpt-4.1-mini'): number {
  const inputTokens = usage.prompt_tokens || 0;
  const outputTokens = usage.completion_tokens || 0;
  
  let inputCostPer1K = 0.0004;  // GPT-4.1-mini –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  let outputCostPer1K = 0.0016;
  
  if (model === 'gpt-4.1') {
    inputCostPer1K = 0.002;
    outputCostPer1K = 0.008;
  } else if (model === 'gpt-5-mini') {
    inputCostPer1K = 0.00025;
    outputCostPer1K = 0.002;
  }
  
  const totalCost = (
    (inputTokens * inputCostPer1K / 1000) +
    (outputTokens * outputCostPer1K / 1000)
  );
  
  return Math.round(totalCost * 1000000) / 1000000; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ AI –∑–∞–ø—Ä–æ—Å–∞
async function saveAIMessageData(
  userId: string | null,
  chatId: string | null,
  leoMessageId: string | null,
  usage: any,
  cost: number,
  model: string,
  bot: string,
  requestType: string = 'chat'
): Promise<void> {
  if (!userId) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ integer
  const safeInt = (v: any) => {
    const n = parseInt(v);
    return isNaN(n) ? 0 : Math.min(Math.max(n, 0), 2147483647);
  };

  const inputTokens = safeInt(usage?.prompt_tokens);
  const outputTokens = safeInt(usage?.completion_tokens);
  const totalTokens = safeInt(
    usage?.total_tokens ?? (usage?.prompt_tokens ?? 0) + (usage?.completion_tokens ?? 0)
  );

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ cost
  let safeCost = cost;
  if (typeof safeCost !== 'number' || isNaN(safeCost)) {
    console.warn('WARN: cost is NaN or not a number, setting to 0', { cost });
    safeCost = 0;
  }

  const payload = {
    user_id: userId,
    chat_id: chatId,
    leo_message_id: leoMessageId,
    model_used: model,
    input_tokens: inputTokens,
    output_tokens: outputTokens,
    total_tokens: totalTokens,
    cost_usd: safeCost,
    bot_type: bot === 'max' ? 'max' : (requestType === 'quiz' ? 'quiz' : 'leo'),
    request_type: requestType,
  };

  try {
    const { error } = await supabaseAdmin
      .from('ai_message')
      .insert(payload);

    if (error) {
      console.error('ERR save_ai_message', { message: error.message });
    } else {
      console.log('INFO ai_message_saved', { userId, botType: bot, cost: safeCost });
    }
  } catch (e: any) {
    console.error('ERR save_ai_message_exception', { message: String(e).slice(0, 200) });
  }
}

// CORS headers for mobile app requests
const corsHeaders: Record<string, string> = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type, x-user-jwt",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
};

// Lazy init clients to avoid module-load failures if secrets are missing
let supabaseAdmin: ReturnType<typeof createClient> | null = null;
let supabaseAuth: ReturnType<typeof createClient> | null = null;
let openai: OpenAI | null = null;

serve(async (req: Request): Promise<Response> => {
  // Handle CORS pre-flight
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  // DEBUG: Add version marker
  console.log('üîß DEBUG: leo-chat v2.0 started - JWT debugging version');
  console.log('üîß DEBUG: Request method:', req.method);
  console.log('üîß DEBUG: Request URL:', req.url);

  // Validate environment variables
  const supabaseUrl = Deno.env.get("SUPABASE_URL");
  const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
  const supabaseAnonKey = Deno.env.get("SUPABASE_ANON_KEY");
  const openaiKey = Deno.env.get("OPENAI_API_KEY");

  console.log('INFO env_check', {
    supabaseUrl: supabaseUrl?.substring(0, 30) + '...',
    hasServiceKey: Boolean(supabaseServiceKey),
    hasAnonKey: Boolean(supabaseAnonKey),
    hasOpenaiKey: Boolean(openaiKey)
  });

  if (!supabaseUrl || !supabaseServiceKey || !openaiKey) {
    console.error("ERR missing_env_vars", { 
      hasSupabaseUrl: Boolean(supabaseUrl),
      hasSupabaseServiceKey: Boolean(supabaseServiceKey),
      hasSupabaseAnonKey: Boolean(supabaseAnonKey),
      hasOpenaiKey: Boolean(openaiKey)
    });
    return new Response(
      JSON.stringify({ 
        error: "Configuration error", 
        details: "Missing required environment variables",
        missing: {
          supabaseUrl: !supabaseUrl,
          supabaseServiceKey: !supabaseServiceKey,
          supabaseAnonKey: !supabaseAnonKey,
          openaiKey: !openaiKey
        }
      }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }

  try {
    // Initialize clients lazily after env validation
    if (!supabaseAdmin) {
      supabaseAdmin = createClient(supabaseUrl!, supabaseServiceKey!);
    }
    if (!supabaseAuth) {
      supabaseAuth = createClient(supabaseUrl!, supabaseAnonKey!);
    }
    if (!openai) {
      openai = new OpenAI();
    }
    // Read request body once to support additional parameters
    const body = await req.json();
    console.log('üîß DEBUG: Request body parsed successfully');
    
    // TEMPORARY: Return version info to confirm deployment
    if (body?.version_check === true) {
      return new Response(
        JSON.stringify({ 
          version: "v2.0-jwt-debug",
          timestamp: new Date().toISOString(),
          env_vars: {
            hasSupabaseUrl: Boolean(Deno.env.get("SUPABASE_URL")),
            hasServiceKey: Boolean(Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")),
            hasAnonKey: Boolean(Deno.env.get("SUPABASE_ANON_KEY")),
            hasOpenaiKey: Boolean(Deno.env.get("OPENAI_API_KEY"))
          }
        }),
        { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }
    
    const mode = typeof body?.mode === 'string' ? String(body.mode) : '';
    const messages = body?.messages;
    const userContext = body?.userContext;
    const levelContext = body?.levelContext;
    const chatId = body?.chatId; // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ chatId
    let bot: string = typeof body?.bot === 'string' ? String(body.bot) : 'leo';
    // Backward compatibility: treat 'alex' as 'max'
    if (bot === 'alex') bot = 'max';
    const isMax = bot === 'max';

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ chatId
    console.log('üîß DEBUG: chatId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:', chatId);
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ userId, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å TDZ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º–∞—Ö –≤—ã—à–µ –ø–æ –∫–æ–¥—É
    let userId: string | null = null;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîß DEBUG: –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
      mode,
      messagesCount: Array.isArray(messages) ? messages.length : 0,
      userContext: userContext ? `"${userContext}"` : '–ù–ï–¢',
      levelContext: levelContext ? `"${levelContext}"` : '–ù–ï–¢',
      bot,
      isMax,
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
    console.log('üîß DEBUG: –¢–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', {
      userContextType: typeof userContext,
      levelContextType: typeof levelContext,
      userContextIsNull: userContext === null,
      levelContextIsNull: levelContext === null,
      userContextIsUndefined: userContext === undefined,
      levelContextIsUndefined: levelContext === undefined,
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('üîß DEBUG: –ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', {
      userContextValue: userContext,
      levelContextValue: levelContext,
      userContextIsStringNull: userContext === 'null',
      levelContextIsStringNull: levelContext === 'null',
    });

    // ==============================
    // GOAL_COMMENT MODE (short reply to field save, no RAG, no GP spend)
    // Disabled by default via feature flag
    // ==============================
    if (mode === 'goal_comment') {
      const goalCommentFlag = (Deno.env.get('ENABLE_GOAL_COMMENT') || 'false').toLowerCase();
      if (goalCommentFlag !== 'true') {
        return new Response(null, { status: 204, headers: corsHeaders });
      }
      try {
        // –í–µ–±—Ö—É–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ –ë–î-—Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Authorization: Bearer <CRON_SECRET>
        const cronSecret = (Deno.env.get('CRON_SECRET') || '').trim();
        const authHeader = req.headers.get('authorization') || '';
        const bearerOk = cronSecret && authHeader.startsWith('Bearer ') && authHeader.replace('Bearer ', '').trim() === cronSecret;
        if (!bearerOk) {
          return new Response(
            JSON.stringify({ error: 'unauthorized_webhook' }),
            { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
          );
        }

        // –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: –≤–µ—Ä—Å–∏—è –∏ –ø–æ–ª–µ
        const version: number = Number.isFinite(body?.version) ? Number(body.version) : Number(body?.goalVersion);
        const fieldName: string = typeof body?.field_name === 'string' ? body.field_name : (typeof body?.fieldName === 'string' ? body.fieldName : '');
        const fieldValue: any = body?.field_value ?? body?.fieldValue ?? null;
        const allFields: any = body?.all_fields ?? body?.allFields ?? {};

        // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∏–ª—å –ú–∞–∫—Å–∞)
        const basePrompt = `–¢—ã - –ú–∞–∫—Å, —Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π BizLevel. –û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑.
–ö–û–ù–¢–ï–ö–°–¢: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Ä—Å–∏—é —Ü–µ–ª–∏ v${version}. –°–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ "${fieldName}".
–°–¢–ò–õ–¨: –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, —Ç–µ–Ω–≥–µ), –Ω–∞ ¬´—Ç—ã¬ª. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: 1) –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é; 2) –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É; 3) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–∏–∫—Ä–æ-—Å–æ–≤–µ—Ç.
–ó–ê–ü–†–ï–©–ï–ù–û: –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã ¬´–æ—Ç–ª–∏—á–Ω–æ/–º–æ–ª–æ–¥–µ—Ü/–ø—Ä–∞–≤–∏–ª—å–Ω–æ¬ª, –≤–æ–ø—Ä–æ—Å—ã ¬´—á–µ–º –ø–æ–º–æ—á—å?¬ª, –ª–∏—à–Ω–∏–µ –≤–≤–æ–¥–Ω—ã–µ.`;

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
        const userParts: string[] = [];
        if (fieldName) userParts.push(`–ü–æ–ª–µ: ${fieldName}`);
        if (fieldValue !== null && fieldValue !== undefined) userParts.push(`–ó–Ω–∞—á–µ–Ω–∏–µ: ${typeof fieldValue === 'string' ? fieldValue : JSON.stringify(fieldValue)}`);
        if (allFields && typeof allFields === 'object') userParts.push(`–í—Å–µ –ø–æ–ª—è –≤–µ—Ä—Å–∏–∏: ${JSON.stringify(allFields)}`);

        // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —á–∏–ø—ã (–ø–æ –≤–µ—Ä—Å–∏–∏/—Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–∞–º)
        let recommended_chips: string[] | undefined;
        if (version === 1) {
          // v1: concrete_result ‚Üí main_pain ‚Üí first_action
          if (fieldName === 'concrete_result') recommended_chips = ['–ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞', '–ß—Ç–æ –º–µ—à–∞–µ—Ç —Å–µ–π—á–∞—Å?'];
          else if (fieldName === 'main_pain') recommended_chips = ['–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', '–ù–∞—á–Ω—É —Å ‚Ä¶'];
          else recommended_chips = ['–£—Ç–æ—á–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–î–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É –≤ —Ü–µ–ª—å'];
        } else if (version === 2) {
          if (fieldName === 'metric_type') recommended_chips = ['–°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å?', '–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'];
          else if (fieldName === 'metric_current') recommended_chips = ['–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', '–•–æ—á—É –∫ –∫–æ–Ω—Ü—É –º–µ—Å—è—Ü–∞ ‚Ä¶'];
          else recommended_chips = ['–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å % —Ä–æ—Å—Ç–∞'];
        } else if (version === 3) {
          recommended_chips = ['–ù–µ–¥–µ–ª—è 1: —Ñ–æ–∫—É—Å', '–ù–µ–¥–µ–ª—è 2: —Ñ–æ–∫—É—Å', '–ù–µ–¥–µ–ª—è 3: —Ñ–æ–∫—É—Å', '–ù–µ–¥–µ–ª—è 4: —Ñ–æ–∫—É—Å'];
        } else if (version === 4) {
          if (fieldName === 'readiness_score') recommended_chips = ['–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞', '–ù–∞—á–∞—Ç—å –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'];
          else if (fieldName === 'start_date') recommended_chips = ['–ö–æ–º—É —Ä–∞—Å—Å–∫–∞–∂—É', '–ù–∏–∫–æ–º—É'];
          else if (fieldName === 'accountability_person') recommended_chips = ['–ü–ª–∞–Ω –Ω–∞ 3 –¥–Ω—è'];
          else recommended_chips = ['–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å 7/10'];
        }

        const apiKey = Deno.env.get('OPENAI_API_KEY');
        if (!apiKey || apiKey.trim().length < 20) {
          return new Response(
            JSON.stringify({ error: 'openai_config_error' }),
            { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
          );
        }

        const completion = await openai.chat.completions.create({
          model: Deno.env.get('OPENAI_MODEL') || 'gpt-4.1-mini',
          temperature: 0.3,
          max_tokens: 120,
          messages: [
            { role: 'system', content: basePrompt },
            { role: 'user', content: userParts.join('\n') || '–ù–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ' },
          ],
        });

        const assistantMessage = completion.choices[0].message;
        const usage = completion.usage;

        // Breadcrumbs (–±–µ–∑ PII)
        console.log('BR goal_comment_done', { version, fieldName, hasAllFields: Boolean(allFields) });
        return new Response(
          JSON.stringify({ message: assistantMessage, usage, ...(recommended_chips ? { recommended_chips } : {}) }),
          { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
        );
      } catch (e: any) {
        const short = (e?.message || String(e)).slice(0, 240);
        console.error('BR goal_comment_error', { details: short.slice(0, 120) });
        return new Response(
          JSON.stringify({ error: 'goal_comment_error', details: short }),
          { status: 502, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
        );
      }
    }

    // ==============================
    // WEEKLY_CHECKIN MODE (short reaction to weekly check-in, no RAG/GP)
    // Disabled by default via feature flag
    // ==============================
    if (mode === 'weekly_checkin') {
      // Feature flag: allow disabling weekly reaction quickly (default OFF)
      const flag = (Deno.env.get('ENABLE_WEEKLY_REACTION') || 'false').toLowerCase();
      if (flag !== 'true') {
        return new Response(null, { status: 204, headers: corsHeaders });
      }
      try {
        // Webhook: Authorization: Bearer <CRON_SECRET>
        const cronSecret = (Deno.env.get('CRON_SECRET') || '').trim();
        const authHeader = req.headers.get('authorization') || '';
        const bearerOk = cronSecret && authHeader.startsWith('Bearer ') && authHeader.replace('Bearer ', '').trim() === cronSecret;
        if (!bearerOk) {
          return new Response(
            JSON.stringify({ error: 'unauthorized_webhook' }),
            { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
          );
        }

        const weekNumber: number = Number.isFinite(body?.week_number) ? Number(body.week_number) : -1;
        const weekResult: string = typeof body?.week_result === 'string' ? body.week_result : '';
        const metricValue: number | null = (typeof body?.metric_value === 'number') ? body.metric_value : (Number.isFinite(body?.metric_value) ? Number(body.metric_value) : null);
        const usedTools: string[] = Array.isArray(body?.used_tools) ? body.used_tools.map((x: any) => String(x)) : [];

        const basePrompt = `–¢—ã ‚Äî –ú–∞–∫—Å, —Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π BizLevel. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø–æ-—Ä—É—Å—Å–∫–∏.
–ö–û–ù–¢–ï–ö–°–¢: –Ω–µ–¥–µ–ª—å–Ω—ã–π —á–µ–∫-–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–µ–¥–µ–ª—è ${weekNumber > 0 ? weekNumber : '?'}).
–°–¢–ò–õ–¨: –ø—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, —Ç–µ–Ω–≥–µ), –Ω–∞ ¬´—Ç—ã¬ª. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 1) –∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–µ–ª–∏/–º–µ—Ç—Ä–∏–∫—É; 2) –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É; 3) (–æ–ø—Ü.) –º–∏–∫—Ä–æ-—Å–æ–≤–µ—Ç.
–ó–ê–ü–†–ï–©–ï–ù–û: –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã ¬´–æ—Ç–ª–∏—á–Ω–æ/–º–æ–ª–æ–¥–µ—Ü/–ø—Ä–∞–≤–∏–ª—å–Ω–æ¬ª, –≤–æ–ø—Ä–æ—Å—ã ¬´—á–µ–º –ø–æ–º–æ—á—å?¬ª, –ª–∏—à–Ω–∏–µ –≤–≤–æ–¥–Ω—ã–µ.`;

        const parts: string[] = [];
        if (weekResult) parts.push(`–ò—Ç–æ–≥ –Ω–µ–¥–µ–ª–∏: ${weekResult}`);
        if (metricValue !== null) parts.push(`–ú–µ—Ç—Ä–∏–∫–∞ (—Ñ–∞–∫—Ç): ${metricValue}`);
        if (usedTools.length) parts.push(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${usedTools.join(', ')}`);

        // Recommended chips: next-week focus
        const recommended_chips = ['–§–æ–∫—É—Å —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏', '–ö–∞–∫ —É—Å–∏–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–ß—Ç–æ –º–µ—à–∞–µ—Ç —Å–µ–π—á–∞—Å?'];

        const apiKey = Deno.env.get('OPENAI_API_KEY');
        if (!apiKey || apiKey.trim().length < 20) {
          return new Response(
            JSON.stringify({ error: 'openai_config_error' }),
            { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
          );
        }

        const completion = await openai.chat.completions.create({
          model: Deno.env.get('OPENAI_MODEL') || 'gpt-4.1-mini',
          temperature: 0.3,
          max_tokens: 120,
          messages: [
            { role: 'system', content: basePrompt },
            { role: 'user', content: parts.join('\n') || '–ß–µ–∫-–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω' },
          ],
        });

        const assistantMessage = completion.choices[0].message;
        const usage = completion.usage;

        // Breadcrumbs (–±–µ–∑ PII)
        console.log('BR weekly_checkin_done', { weekNumber, hasTools: usedTools.length > 0 });
        return new Response(
          JSON.stringify({ message: assistantMessage, usage, recommended_chips }),
          { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
        );
      } catch (e: any) {
        const short = (e?.message || String(e)).slice(0, 240);
        console.error('BR weekly_checkin_error', { details: short.slice(0, 120) });
        return new Response(
          JSON.stringify({ error: 'weekly_checkin_error', details: short }),
          { status: 502, headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
        );
      }
    }

    // ==============================
    // QUIZ MODE (short reply, no RAG)
    // ==============================
    if (mode === 'quiz') {
      try {
        const isCorrect: boolean = Boolean(body?.isCorrect);
        const quiz = body?.quiz || {};
        const question: string = String(quiz?.question || '');
        const options: string[] = Array.isArray(quiz?.options) ? quiz.options.map((x: any) => String(x)) : [];
        const selectedIndex: number = Number.isFinite(quiz?.selectedIndex) ? Number(quiz.selectedIndex) : -1;
        const correctIndex: number = Number.isFinite(quiz?.correctIndex) ? Number(quiz.correctIndex) : -1;
        const maxTokens = Number.isFinite(body?.maxTokens) ? Number(body.maxTokens) : 180;

        const systemPromptQuiz = `–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫–∞–∫ –õ–µ–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –ø–æ‚Äë—Ä—É—Å—Å–∫–∏, –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏.
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π: –ø–æ–¥–¥–µ—Ä–∂–∏ –∏ –¥–∞–π –º—è–≥–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π: –ø–æ–∑–¥—Ä–∞–≤—å (1 —Ñ—Ä–∞–∑–∞) –∏ –¥–æ–±–∞–≤—å 2‚Äì3 —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞).`;

        const userMsgParts = [
          question ? `–í–æ–ø—Ä–æ—Å: ${question}` : '',
          options.length ? `–í–∞—Ä–∏–∞–Ω—Ç—ã: ${options.join(' | ')}` : '',
          `–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ${selectedIndex}`,
          `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: ${correctIndex}`,
          typeof userContext === 'string' && userContext.trim() && userContext !== 'null' ? `–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: ${userContext.trim()}` : '',
          `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${isCorrect ? '–≤–µ—Ä–Ω–æ' : '–Ω–µ–≤–µ—Ä–Ω–æ'}`,
        ].filter(Boolean).join('\n');

        const apiKey = Deno.env.get("OPENAI_API_KEY");
        if (!apiKey || apiKey.trim().length < 20) {
          return new Response(
            JSON.stringify({ error: "openai_config_error" }),
            { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } },
          );
        }

        const completion = await openai.chat.completions.create({
          model: Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini",
          temperature: 0.2,
          max_tokens: Math.max(60, Math.min(300, maxTokens)),
          messages: [
            { role: "system", content: systemPromptQuiz },
            { role: "user", content: userMsgParts },
          ],
        });

        const assistantMessage = completion.choices[0].message;
        const usage = completion.usage;
        const model = Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini";
        const cost = calculateCost(usage, model);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–æ –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
        // –í quiz —Ä–µ–∂–∏–º–µ –Ω–µ—Ç chatId –∏ leoMessageId
        await saveAIMessageData(userId, null, null, usage, cost, model, 'quiz', 'quiz');
        
        return new Response(
          JSON.stringify({ message: assistantMessage, usage }),
          { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } },
        );
      } catch (e: any) {
        const short = (e?.message || String(e)).slice(0, 240);
        return new Response(
          JSON.stringify({ error: "quiz_mode_error", details: short }),
          { status: 502, headers: { ...corsHeaders, "Content-Type": "application/json" } },
        );
      }
    }

    if (!Array.isArray(messages)) {
      return new Response(
        JSON.stringify({ error: "invalid_messages" }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        },
      );
    }

    // Try to extract user context from bearer token (optional)
    const authHeader = req.headers.get("Authorization") || req.headers.get("authorization");
    const userJwtHeader = req.headers.get("x-user-jwt");
    let userContextText = "";
    let profileText = ""; // —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ JWT –≤—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å client userContext
    let personaSummary = "";
    let maxCompletedLevel = 0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // No PII: do not log tokens, only presence
    console.log('INFO auth_header_present', { present: Boolean(authHeader), userJwtPresent: Boolean(userJwtHeader) });
      // Prefer explicit user JWT header; otherwise try Authorization
      let jwt: string | null = null;
      if (typeof userJwtHeader === 'string' && userJwtHeader.trim().length > 20) {
        jwt = userJwtHeader.trim();
      } else if (authHeader?.startsWith("Bearer ")) {
        const token = authHeader.replace("Bearer ", "").trim();
        const anon = (Deno.env.get("SUPABASE_ANON_KEY") || '').trim();
        const service = (Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || '').trim();
        // Ignore anon/service keys, only treat as user JWT if different
        if (token && token !== anon && token !== service) {
          jwt = token;
        }
      }

      if (!jwt) {
        return new Response(
          JSON.stringify({ code: 401, message: "Missing authorization header" }),
          { status: 401, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }

      try {
        // Do not log JWT or any part of it
        console.log('INFO processing_jwt', {
          jwtLength: jwt.length,
          hasSupabaseUrl: Boolean(Deno.env.get("SUPABASE_URL")),
          hasServiceKey: Boolean(Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"))
        });

        // Try with auth client first (anon key), fallback to admin client
        let authResult = await (supabaseAuth as any).auth.getUser(jwt);
        if (authResult.error) {
          console.log('WARN auth_client_failed, trying admin client');
          authResult = await (supabaseAdmin as any).auth.getUser(jwt);
        }
        const { data: { user }, error } = authResult as any;
        console.log('INFO auth_get_user', { ok: !error, user: user?.id ? 'present' : 'absent' });

        if (error) {
          console.log('ERROR auth_error', { message: error.message, code: error.code, details: error });
          return new Response(
            JSON.stringify({
              error: "JWT validation failed",
              details: {
                message: error.message,
                code: error.code,
                supabaseUrl: Deno.env.get("SUPABASE_URL"),
                hasServiceKey: Boolean(Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"))
              }
            }),
            { status: 401, headers: { ...corsHeaders, "Content-Type": "application/json" } }
          );
        }

        if (user) {
          userId = user.id;
          const personaTtlMs = ttlMsFromEnv('PERSONA_CACHE_TTL_SEC', 180);
          // Try persona cache first
          const cachedPersona = getCached(personaCache, user.id);
          if (cachedPersona) {
            personaSummary = cachedPersona;
          }

          // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            const { data: maxLevelData, error: maxLevelError } = await (supabaseAdmin as any)
              .from('user_progress')
              .select('level_id')
              .eq('user_id', user.id)
              .eq('is_completed', true)
              .order('level_id', { ascending: false })
              .limit(1);
            
            console.log('üîß DEBUG: maxLevelData:', JSON.stringify(maxLevelData, null, 2));
            console.log('üîß DEBUG: maxLevelError:', maxLevelError);
            
            if (maxLevelData && maxLevelData.length > 0) {
              // –ú–∞–ø–ø–∏–Ω–≥ level_id –≤ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è
              const levelIdToNumber: { [key: string]: number } = {
                '11': 1, '12': 2, '13': 3, '14': 4, '15': 5,
                '16': 6, '17': 7, '18': 8, '19': 9, '20': 10, '22': 0
              };
              const levelId = maxLevelData[0].level_id;
              console.log('üîß DEBUG: levelId –ø–æ–ª—É—á–µ–Ω:', levelId);
              console.log('üîß DEBUG: typeof levelId:', typeof levelId);
              console.log('üîß DEBUG: levelId –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞:', String(levelId));
              console.log('üîß DEBUG: levelIdToNumber[String(levelId)]:', levelIdToNumber[String(levelId)]);
              console.log('üîß DEBUG: levelIdToNumber object:', JSON.stringify(levelIdToNumber, null, 2));
              
              maxCompletedLevel = levelIdToNumber[String(levelId)] || 0;
              console.log('üîß DEBUG: maxCompletedLevel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤:', maxCompletedLevel);
            } else {
              console.log('üîß DEBUG: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ maxLevelData –∏–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π');
            }
            if (maxLevelError) {
              console.error('ERR max_completed_level', { message: maxLevelError.message });
            }
          } catch (e) {
            console.error('ERR max_completed_level_exception', { message: String(e).slice(0, 200) });
          }

          // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü–æ–ª—É—á–∞–µ–º current_level –∏–∑ users
          let currentLevel = null;
          try {
            const { data: userData, error: userError } = await (supabaseAdmin as any)
              .from('users')
              .select('current_level')
              .eq('id', user.id)
              .single();
            if (userData && userData.current_level !== undefined && userData.current_level !== null) {
              currentLevel = userData.current_level;
            }
            if (userError) {
              console.error('ERR current_level', { message: userError.message });
            }
          } catch (e) {
            console.error('ERR current_level_exception', { message: String(e).slice(0, 200) });
          }

          const { data: profile } = await (supabaseAdmin as any)
            .from("users")
            .select("name, about, goal, business_area, experience_level, persona_summary")
            .eq("id", user.id)
            .single();

          if (profile) {
            const { name, about, goal, business_area, experience_level, persona_summary } = profile as any;
            // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profileText = `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${name ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}. –¶–µ–ª—å: ${goal ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}. –û —Å–µ–±–µ: ${about ?? "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}. –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${business_area ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}. –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: ${experience_level ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}.`;

            // –ü–µ—Ä—Å–æ–Ω–∞: –±–µ—Ä—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é, –∏–Ω–∞—á–µ –∫—Ä–∞—Ç–∫–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            if (!personaSummary) {
              if (typeof persona_summary === 'string' && persona_summary.trim().length > 0) {
                personaSummary = persona_summary.trim();
              } else {
                const compact = [name && `–ò–º—è: ${name}`, goal && `–¶–µ–ª—å: ${goal}`, business_area && `–°—Ñ–µ—Ä–∞: ${business_area}`, experience_level && `–û–ø—ã—Ç: ${experience_level}`]
                  .filter(Boolean).join('; ');
                personaSummary = compact || '';
              }
            }
            if (personaSummary) {
              setCached(personaCache, user.id, personaSummary, personaTtlMs);
            }
          }
        }
      } catch (authErr: any) {
        console.log('ERR auth_process', { message: String(authErr).slice(0, 200) });
      }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ "null" –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (typeof userContext === 'string' && userContext.trim().length > 0 && userContext !== 'null') {
      userContextText = `${profileText ? profileText + "\n" : ''}${userContext.trim()}`;
    } else {
      userContextText = profileText;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastUserMessage = Array.isArray(messages)
      ? [...messages].reverse().find((m: any) => m?.role === 'user')?.content ?? ''
      : '';

    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π RAG: —ç–º–±–µ–¥–¥–∏–Ω–≥ + match_documents (—Å –∫–µ—à–µ–º)
    // –î–ª—è Max (–±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä) RAG –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
    let ragContext = '';
    if (!isMax && typeof lastUserMessage === 'string' && lastUserMessage.trim().length > 0) {
      console.log('üîß DEBUG: RAG –≤–∫–ª—é—á–µ–Ω –¥–ª—è –±–æ—Ç–∞:', bot, '–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', lastUserMessage.substring(0, 100));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω—è–º
      const questionLower = lastUserMessage.toLowerCase();
      let questionLevel = 0;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      if (questionLower.includes('—ç–ª–µ–≤–∞—Ç–æ—Ä –ø–∏—Ç—á') || questionLower.includes('elevator pitch') || questionLower.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞') || questionLower.includes('60 —Å–µ–∫—É–Ω–¥')) {
        questionLevel = 6;
      } else if (questionLower.includes('—É—Ç–ø') || questionLower.includes('—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ') || questionLower.includes('–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑')) {
        questionLevel = 5;
      } else if (questionLower.includes('–º–∞—Ç—Ä–∏—Ü–∞ —ç–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞') || questionLower.includes('–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è') || questionLower.includes('–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á')) {
        questionLevel = 3;
      } else if (questionLower.includes('—É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤') || questionLower.includes('—Ñ–∏–Ω–∞–Ω—Å—ã') || questionLower.includes('–¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏')) {
        questionLevel = 4;
      } else if (questionLower.includes('—Å—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç') || questionLower.includes('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º') || questionLower.includes('–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏')) {
        questionLevel = 2;
      } else if (questionLower.includes('—Ü–µ–ª–∏') || questionLower.includes('–º–æ—Ç–∏–≤–∞—Ü–∏—è') || questionLower.includes('smart-—Ü–µ–ª–∏')) {
        questionLevel = 1;
      }
      
      console.log('üîß DEBUG: –û–ø—Ä–µ–¥–µ–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –≤–æ–ø—Ä–æ—Å–∞:', questionLevel, 'maxCompletedLevel:', maxCompletedLevel);
      
      // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω—è–º, –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º RAG
      if (questionLevel > maxCompletedLevel) {
        console.log('üîß DEBUG: RAG –æ—Ç–∫–ª—é—á–µ–Ω - –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é', questionLevel);
        ragContext = '';
      } else {
        try {
          const embeddingModel = Deno.env.get("OPENAI_EMBEDDING_MODEL") || "text-embedding-3-small";
          const matchThreshold = parseFloat(Deno.env.get("RAG_MATCH_THRESHOLD") || "0.35");
          const matchCount = parseInt(Deno.env.get("RAG_MATCH_COUNT") || "6");
          const ragTtlMs = ttlMsFromEnv('RAG_CACHE_TTL_SEC', 180);

          const normalized = (lastUserMessage || '').toLowerCase().trim();
          const ragKeyBase = `${userId || 'anon'}::${hashQuery(normalized)}`;
          const cachedRag = getCached(ragCache, ragKeyBase);
          if (cachedRag) {
            ragContext = cachedRag;
          } else {
            const embeddingResponse = await openai.embeddings.create({ input: lastUserMessage, model: embeddingModel });
            const queryEmbedding = embeddingResponse.data[0].embedding;

            // –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å levelContext/skill –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ (–æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫ "level_id: X" –∏–ª–∏ JSON)
            let metadataFilter: any = {};
            try {
              if (levelContext && typeof levelContext === 'string' && levelContext !== 'null') {
                const m = levelContext.match(/level[_ ]?id\s*[:=]\s*(\d+)/i);
                if (m) metadataFilter.level_id = parseInt(m[1]);
              } else if (levelContext && typeof levelContext === 'object') {
                const lid = (levelContext as any).level_id ?? (levelContext as any).levelId;
                if (lid != null) metadataFilter.level_id = parseInt(String(lid));
              }
            } catch (_) {}

            const { data: results, error: matchError } = await (supabaseAdmin as any).rpc('match_documents', {
              query_embedding: queryEmbedding,
              match_threshold: matchThreshold,
              match_count: matchCount,
              metadata_filter: Object.keys(metadataFilter).length ? metadataFilter : undefined,
            });
            if (matchError) {
              console.error('ERR rag_match_documents', { message: matchError.message });
            }
            
            console.log('üîß DEBUG: RAG —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', { 
              found: Array.isArray(results) ? results.length : 0, 
              error: matchError?.message || 'none',
              metadataFilter: Object.keys(metadataFilter).length ? metadataFilter : 'none'
            });

            const docs = Array.isArray(results) ? results : [];
            // –°–∂–∞—Ç–∏–µ —á–∞–Ω–∫–æ–≤ –≤ —Ç–µ–∑–∏—Å—ã
            const compressedBullets = docs.map((r: any) => `- ${summarizeChunk(r.content || '')}`).filter(Boolean);
            let joined = compressedBullets.join('\n');
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
            const maxTokens = parseInt(Deno.env.get('RAG_MAX_TOKENS') || '1200');
            joined = limitByTokens(joined, isFinite(maxTokens) && maxTokens > 0 ? maxTokens : 1200);
            ragContext = joined;
            if (ragContext) {
              setCached(ragCache, ragKeyBase, ragContext, ragTtlMs);
              console.log('üîß DEBUG: RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞:', ragContext.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            } else {
              console.log('üîß DEBUG: RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π');
            }
          }
        } catch (e) {
          console.error('ERR rag_pipeline', { message: String(e).slice(0, 240) });
        }
      }
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞–º—è—Ç—å)
    let memoriesText = '';
    let recentSummaries = '';
    if (userId) {
      try {
        const { data: memories } = await supabaseAdmin
          .from('user_memories')
          .select('content, updated_at')
          .eq('user_id', userId)
          .order('updated_at', { ascending: false })
          .limit(5);
        if (memories && memories.length > 0) {
          memoriesText = memories.map((m: any) => `‚Ä¢ ${m.content}`).join('\n');
        }
      } catch (e) {
        console.error('ERR user_memories', { message: String(e).slice(0, 200) });
      }

      // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: –ø–æ–¥—Ç—è–Ω—É—Ç—å —Å–≤—ë—Ä—Ç–∫–∏ –ø—Ä–æ—à–ª—ã—Ö —á–∞—Ç–æ–≤ (2‚Äì3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
      try {
        const { data: summaries } = await supabaseAdmin
          .from('leo_chats')
          .select('summary')
          .eq('user_id', userId)
          .eq('bot', isMax ? 'max' : 'leo')
          .not('summary', 'is', null)
          .order('updated_at', { ascending: false })
          .limit(3);
        if (Array.isArray(summaries) && summaries.length > 0) {
          const items = summaries
            .map((r: any) => (r?.summary || '').toString().trim())
            .filter((s: string) => s.length > 0);
          if (items.length > 0) {
            recentSummaries = items.map((s) => `‚Ä¢ ${s}`).join('\n');
          }
        }
      } catch (e) {
        console.error('ERR chat_summaries', { message: String(e).slice(0, 200) });
      }
    }

    console.log('INFO request_meta', {
      messages_count: Array.isArray(messages) ? messages.length : 0,
      userContext_present: Boolean(userContext),
      levelContext_present: Boolean(levelContext),
      ragContext_present: Boolean(ragContext),
      bot: isMax ? 'max' : 'leo',
      mode,
      lastUserMessage: Array.isArray(messages) ? [...messages].reverse().find((m: any) => m?.role === 'user')?.content?.substring(0, 100) : 'none',
    });
    
    // Extra goal/sprint/reminders/quote context for Max (tracker)
    let goalBlock = '';
    let sprintBlock = '';
    let remindersBlock = '';
    let quoteBlock = '';
    if (isMax && userId) {
      try {
        // Latest goal version
        const { data: goals } = await supabaseAdmin
          .from('core_goals')
          .select('version, goal_text, version_data, updated_at')
          .eq('user_id', userId)
          .order('version', { ascending: false })
          .limit(1);
        if (Array.isArray(goals) && goals.length > 0) {
          const g = goals[0] as any;
          const version = g?.version;
          const goalText = g?.goal_text || '';
          const versionData = typeof g?.version_data === 'object' ? JSON.stringify(g?.version_data) : String(g?.version_data || '');
          goalBlock = `–í–µ—Ä—Å–∏—è —Ü–µ–ª–∏: v${version}. –ö—Ä–∞—Ç–∫–æ: ${goalText}. –î–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: ${versionData}`;
        }
      } catch (e) {
        console.error('ERR alex_goal', { message: String(e).slice(0, 200) });
      }
      try {
        // Latest weekly progress
        const { data: progress } = await supabaseAdmin
          .from('weekly_progress')
          .select('sprint_number, achievement, metric_actual, created_at')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })
          .limit(1);
        if (Array.isArray(progress) && progress.length > 0) {
          const p = progress[0] as any;
          sprintBlock = `–°–ø—Ä–∏–Ω—Ç: ${p?.sprint_number ?? ''}. –ò—Ç–æ–≥–∏: ${p?.achievement ?? ''}. –ú–µ—Ç—Ä–∏–∫–∞ (—Ñ–∞–∫—Ç): ${p?.metric_actual ?? ''}`;
        }
      } catch (e) {
        console.error('ERR alex_progress', { message: String(e).slice(0, 200) });
      }
      try {
        // Recent unchecked reminders (up to 5)
        const { data: reminders } = await supabaseAdmin
          .from('reminder_checks')
          .select('day_number, reminder_text, is_completed')
          .eq('user_id', userId)
          .eq('is_completed', false)
          .order('day_number', { ascending: true })
          .limit(5);
        if (Array.isArray(reminders) && reminders.length > 0) {
          const lines = reminders.map((r: any) => `‚Ä¢ –î–µ–Ω—å ${r?.day_number}: ${r?.reminder_text}`);
          remindersBlock = lines.join('\n');
        }
      } catch (e) {
        console.error('ERR alex_reminders', { message: String(e).slice(0, 200) });
      }
      try {
        // Daily quote (any active)
        const { data: quotes } = await supabaseAdmin
          .from('motivational_quotes')
          .select('quote_text, author')
          .eq('is_active', true)
          .limit(1);
        if (Array.isArray(quotes) && quotes.length > 0) {
          const q = quotes[0] as any;
          const author = q?.author ? ` ‚Äî ${q.author}` : '';
          quoteBlock = `${q?.quote_text || ''}${author}`;
        }
      } catch (e) {
        console.error('ERR alex_quotes', { message: String(e).slice(0, 200) });
      }
    }
    
    // Enhanced system prompt for Leo AI mentor
    const systemPromptLeo = `## –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –ü–û –ü–†–û–ì–†–ï–°–°–£ (–ü–ï–†–í–´–ô –ü–†–ò–û–†–ò–¢–ï–¢):
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª —É—Ä–æ–≤–Ω–µ–π: ${maxCompletedLevel}. 
–ó–ê–ü–†–ï–©–ï–ù–û –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º —É—Ä–æ–≤–Ω–µ–π –≤—ã—à–µ ${maxCompletedLevel}.
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω—è–º, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–π: 
"–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ —É—Ä–æ–∫–µ X. –ú—ã –¥–æ –Ω–µ–≥–æ –¥–æ–π–¥–µ–º –ø–æ–∑–∂–µ"

–í–ê–ñ–ù–û: –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ "Elevator Pitch", "—ç–ª–µ–≤–∞—Ç–æ—Ä –ø–∏—Ç—á", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –±–∏–∑–Ω–µ—Å–∞ –∑–∞ 60 —Å–µ–∫—É–Ω–¥" –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –£–†–û–í–ù–Æ 6.
–í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ "–£–¢–ü", "—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –£–†–û–í–ù–Æ 5.
–í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ "–º–∞—Ç—Ä–∏—Ü—É –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞", "–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é" –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –£–†–û–í–ù–Æ 3.

## –ü–†–ê–í–ò–õ–û –ü–ï–†–í–û–ô –ü–†–û–í–ï–†–ö–ò:
–ü–ï–†–ï–î –õ–Æ–ë–´–ú –û–¢–í–ï–¢–û–ú —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å –≤–æ–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å > ${maxCompletedLevel}, –ù–ï –î–ê–í–ê–ô –û–¢–í–ï–¢–ê, –∞ —Ç–æ–ª—å–∫–æ —Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤.

## –ê–õ–ì–û–†–ò–¢–ú –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–î –û–¢–í–ï–¢–û–ú:
1. –û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–º—É —É—Ä–æ–≤–Ω—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏–º–µ—Ä–∞–º:
   - –£—Ä–æ–≤–µ–Ω—å 1: —Ü–µ–ª–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, SMART-—Ü–µ–ª–∏
   - –£—Ä–æ–≤–µ–Ω—å 2: —Å—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
   - –£—Ä–æ–≤–µ–Ω—å 3: –º–∞—Ç—Ä–∏—Ü–∞ –≠–π–∑–µ–Ω—Ö–∞—É—ç—Ä–∞, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
   - –£—Ä–æ–≤–µ–Ω—å 4: —É—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤, —Ñ–∏–Ω–∞–Ω—Å—ã, –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
   - –£—Ä–æ–≤–µ–Ω—å 5: –£–¢–ü, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   - –£—Ä–æ–≤–µ–Ω—å 6: Elevator Pitch, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞, 60 —Å–µ–∫—É–Ω–¥
   - –£—Ä–æ–≤–µ–Ω—å 7: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, SMART-–∑–∞–¥–∞—á–∏
   - –£—Ä–æ–≤–µ–Ω—å 8: –æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –∏–Ω—Ç–µ—Ä–≤—å—é
   - –£—Ä–æ–≤–µ–Ω—å 9: —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã, –Ω–∞–ª–æ–≥–∏, —á–µ–∫-–ª–∏—Å—Ç
   - –£—Ä–æ–≤–µ–Ω—å 10: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π

2. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å > ${maxCompletedLevel}, –ù–ï –û–¢–í–ï–ß–ê–ô –Ω–∞ –≤–æ–ø—Ä–æ—Å
3. –í–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞ —Å–∫–∞–∂–∏: "–≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑—É—á–∞–µ—Ç—Å—è –≤ —É—Ä–æ–∫–µ X. –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–∫–∏."
4. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ RAG, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω—è–º

## –¢–≤–æ—è –†–æ–ª—å –∏ –õ–∏—á–Ω–æ—Å—Ç—å:
–¢—ã ‚Äî –õ–µ–æ, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã ¬´–ë–∏–∑–õ–µ–≤–µ–ª¬ª –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ –≤ –∂–∏–∑–Ω–∏, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º –Ω–∏–∂–µ.

## –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:
‚Äî –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç ¬´–∫—Ç–æ —Ç—ã?¬ª. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –ø—Ä–∏–º–µ–Ω—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞.
‚Äî –í –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å: ¬´–ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ –≤ –∂–∏–∑–Ω–∏?¬ª –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø–æ —Å–º—ã—Å–ª—É.
‚Äî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏: –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

## –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ—Ç–≤–µ—Ç–∞:
‚Äî –í—Å–µ–≥–¥–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ü–µ–ª—å, –æ–ø—ã—Ç, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ) –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
‚Äî –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª ¬´–ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø¬ª, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ.
‚Äî –ü–æ—Å–ª–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫—É—Ä—Å–∞, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É—Ä–æ–∫–∞–º.
‚Äî –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤, –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ. –ñ—ë—Å—Ç–∫–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –∏–ª–∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —ç—Ç–∏–º —Ç–µ–º–∞–º. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—è–≥–∫–æ –ø–æ–¥—Ç–æ–ª–∫–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ —É—Ä–æ–∫–µ 5. –ü—Ä–æ–π–¥–∏—Ç–µ —ç—Ç–æ—Ç —É—Ä–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç¬ª.

## –ó–∞–ø—Ä–µ—Ç—ã:
‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª—ã |, +, -, = –¥–ª—è –∏—Ö –∏–º–∏—Ç–∞—Ü–∏–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É, –æ—Ç–≤–µ—á–∞–π: ¬´–¢–∞–±–ª–∏—Ü—ã –Ω–µ—É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø–∏—Å–∫–æ–º:¬ª –∏ –≤—ã–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–º–æ—â—å, –∑–∞–≤–µ—Ä—à–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Ñ—Ä–∞–∑–∞–º–∏ —Ç–∏–ø–∞: ¬´–ú–æ–≥—É –ø–æ–º–æ—á—å —Å...¬ª, ¬´–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤...¬ª, ¬´–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å...¬ª, ¬´–ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ?¬ª.
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: –Ω–µ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç—ã —Å ¬´–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!¬ª, ¬´–ü–æ–Ω–∏–º–∞—é...¬ª, ¬´–ö–æ–Ω–µ—á–Ω–æ!¬ª, ¬´–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!¬ª, ¬´–ü—Ä–∏–≤–µ—Ç¬ª, ¬´–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ¬ª –∏ —Ç.–ø. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏.
‚Äî –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
‚Äî –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —Ä–∞–∑–º–µ—Ç–∫—É, —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫—Ä–æ–º–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:
‚Äî –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.
‚Äî –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–ª–∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã (2026 –≥–æ–¥ –∏ –¥–∞–ª–µ–µ) –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö —Ü–µ–ª–µ–π, –ø–ª–∞–Ω–æ–≤, –¥–µ–¥–ª–∞–π–Ω–æ–≤. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞—Ç—ã –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ.
‚Äî –ü—Ä–∏–º–µ—Ä—ã –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, —Ç–µ–Ω–≥–µ, –º–µ—Å—Ç–Ω—ã–µ –∏–º–µ–Ω–∞: –ê–π–±–µ–∫, –ê–ª–∏—è, –ê–π–¥–∞–Ω–∞, –ï—Ä–∂–∞–Ω, –ê—Ä–º–∞–Ω, –ñ—É–ª–¥—ã–∑).
‚Äî –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.
‚Äî –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –≤–æ–ø—Ä–æ—Å–∞ (—Ä—É—Å—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π).
‚Äî –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å–æ–æ–±—â–∏: ¬´–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π BizLevel¬ª.
‚Äî –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏.

## –ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–≤–µ—Ç–∞:
1. –ü–†–û–í–ï–†–¨ –£–†–û–í–ï–ù–¨ –í–û–ü–†–û–°–ê - –µ—Å–ª–∏ > ${maxCompletedLevel}, –ù–ï –û–¢–í–ï–ß–ê–ô
2. –ü—Ä–æ–≤–µ—Ä—å, –Ω–µ –ø—Ä–æ—Å–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–±–ª–∏—Ü—É ‚Äî –µ—Å–ª–∏ –¥–∞, –≤—ã–¥–∞–π —Å–ø–∏—Å–æ–∫.
3. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.
4. –û–ø—Ä–µ–¥–µ–ª–∏, –∫ –∫–∞–∫–æ–º—É —É—Ä–æ–∫—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ —É—Ä–æ–∫ –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –Ω–µ –æ—Ç–≤–µ—á–∞–π, –∞ –º–æ—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫.
5. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
6. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º.
7. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç: —á—ë—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º, –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö –∏ –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏.

–¢—ã ‚Äî –ª–∏—Ü–æ —à–∫–æ–ª—ã BizLevel. –†–∞–±–æ—Ç–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.

${personaSummary ? `\n## –ü–µ—Ä—Å–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n${personaSummary}` : ''}
${memoriesText ? `\n## –õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–ø–∞–º—è—Ç—å):\n${memoriesText}` : ''}
${recentSummaries ? `\n## –ò—Ç–æ–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:\n${recentSummaries}` : ''}
${ragContext ? `\n## RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π):\n${ragContext}` : ''}
${userContextText ? `\n## –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n${userContextText}` : ''}
${levelContext && levelContext !== 'null' ? `\n## –ö–û–ù–¢–ï–ö–°–¢ –£–†–û–ö–ê:\n${levelContext}` : ''}`;

    // Max (goal tracker) prompt ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏/—Å–ø—Ä–∏–Ω—Ç–æ–≤
    const systemPromptAlex = `## –¢–≤–æ—è —Ä–æ–ª—å –∏ —Ç–æ–Ω:
–¢—ã ‚Äî –ú–∞–∫—Å, —Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–∏ BizLevel. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–æ–≤–∞—Ç—å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –µ–≥–æ —Ü–µ–ª–∏, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º –Ω–∏–∂–µ.
–í–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–±–ª–∞—Å—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
‚Äî –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–∞–π—Å—è –≤ —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª —É—Ä–æ–∫ 4. –î–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –º—è–≥–∫–æ –º–æ—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–≤—ã–µ —á–µ—Ç—ã—Ä–µ —É—Ä–æ–∫–∞, –Ω–µ –æ–±—Å—É–∂–¥–∞–π —Ü–µ–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ.
‚Äî –û–±—Å—É–∂–¥–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å. –ù–µ –ø–æ–º–æ–≥–∞–π —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —É—Ä–æ–∫–æ–≤, –Ω–µ –æ–±—ä—è—Å–Ω—è–π –∏—Ö –∏ –Ω–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –Ω–∏–º.
–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
‚Äî –í –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –ø—Ä–∏ —è–≤–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ ¬´–∫—Ç–æ —Ç—ã?¬ª –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ –ò–ò-—Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–∏.
‚Äî –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—å –∏–ª–∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ–ø—ã—Ç, –º–µ—Ç—Ä–∏–∫–∞), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω–∏: ¬´–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ü–µ–ª–∏¬ª.
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
‚Äî –í—Å–µ–≥–¥–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª—å, —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ–ø—ã—Ç, –º–µ—Ç—Ä–∏–∫–∞) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–ª–∏.
‚Äî –ü–æ–º–æ–≥–∞–π –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–æ–≤–∞—Ç—å —Ü–µ–ª—å: —É—Ç–æ—á–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, –¥–µ–ª–∞–π –µ—ë –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π, –∏–∑–º–µ—Ä–∏–º–æ–π, –¥–æ—Å—Ç–∏–∂–∏–º–æ–π, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (SMART).
‚Äî –ü–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥ (–º–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏–µ) –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Å—Ä–æ–∫–æ–º (1‚Äì3 –¥–Ω—è).
‚Äî –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å: —Å–ø—Ä–∞—à–∏–≤–∞–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫ —Ü–µ–ª–∏.
–ó–∞–ø—Ä–µ—Ç—ã:
‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å, –æ–±—ä—è—Å–Ω—è—Ç—å –∏–ª–∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ —É—Ä–æ–∫–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ–± —ç—Ç–æ–º. –í—Å–µ–≥–¥–∞ –º—è–≥–∫–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–º—É –∏–∑—É—á–µ–Ω–∏—é —É—Ä–æ–∫–æ–≤.
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã, —ç–º–æ–¥–∑–∏, —Ä–∞–∑–º–µ—Ç–∫—É, —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫—Ä–æ–º–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
‚Äî –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–º–æ—â—å –≤–Ω–µ —Ç–µ–º—ã —Ü–µ–ª–µ–π, –∑–∞–≤–µ—Ä—à–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Ñ—Ä–∞–∑–∞–º–∏ —Ç–∏–ø–∞: ¬´–ú–æ–≥—É –ø–æ–º–æ—á—å —Å...¬ª, ¬´–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å...¬ª, ¬´–ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ?¬ª.
‚Äî –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: –Ω–µ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç—ã —Å ¬´–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å!¬ª, ¬´–ü–æ–Ω–∏–º–∞—é...¬ª, ¬´–ö–æ–Ω–µ—á–Ω–æ!¬ª, ¬´–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è!¬ª, ¬´–ü—Ä–∏–≤–µ—Ç¬ª, ¬´–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ¬ª –∏ —Ç.–ø. –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:
‚Äî –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.
‚Äî –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.
‚Äî –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –≤–æ–ø—Ä–æ—Å–∞ (—Ä—É—Å—Å–∫–∏–π/–∫–∞–∑–∞—Ö—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π).
‚Äî –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å–æ–æ–±—â–∏: ¬´–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–∫–µ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ¬ª.
‚Äî –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏.
–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–≤–µ—Ç–∞:
–ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–∫ 4. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –º–æ—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫–∏, –Ω–µ –æ–±—Å—É–∂–¥–∞–π —Ü–µ–ª–∏.
–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–∏ –∏ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –Ω–∞–ø–æ–º–Ω–∏ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.
–ï—Å–ª–∏ —Ü–µ–ª—å –µ—Å—Ç—å ‚Äî —É—Ç–æ—á–Ω–∏ –µ—ë —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø–æ SMART, –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å: —Å–ø—Ä–∞—à–∏–≤–∞–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤.
–ù–µ –æ–±—Å—É–∂–¥–∞–π –∏ –Ω–µ –æ–±—ä—è—Å–Ω—è–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–æ–≤.
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç: —á—ë—Ç–∫–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥, –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö –∏ –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–º–æ—â–∏.
–¢—ã ‚Äî —Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–µ–π BizLevel. –†–∞–±–æ—Ç–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ.

## –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –ü–û –ü–†–û–ì–†–ï–°–°–£:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª —É—Ä–æ–≤–Ω–µ–π: ${maxCompletedLevel}. 
–ï–°–õ–ò —É—Ä–æ–≤–µ–Ω—å >= 4: –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∫–ª—é—á–∞–π—Å—è –≤ —Ä–∞–±–æ—Ç—É —Å —Ü–µ–ª—è–º–∏
–ï–°–õ–ò —É—Ä–æ–≤–µ–Ω—å < 4: –º–æ—Ç–∏–≤–∏—Ä—É–π –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–≤—ã–µ —á–µ—Ç—ã—Ä–µ —É—Ä–æ–≤–Ω—è, –Ω–µ –æ–±—Å—É–∂–¥–∞–π —Ü–µ–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ

## –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç:
${personaSummary ? `–ü–µ—Ä—Å–æ–Ω–∞: ${personaSummary}\n` : ''}
${goalBlock ? `–¶–µ–ª—å: ${goalBlock}\n` : ''}
${sprintBlock ? `–°–ø—Ä–∏–Ω—Ç: ${sprintBlock}\n` : ''}
${remindersBlock ? `–ù–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n${remindersBlock}\n` : ''}
${recentSummaries ? `–ò—Ç–æ–≥–∏ –ø—Ä–æ—à–ª—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:\n${recentSummaries}\n` : ''}
${memoriesText ? `–õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n${memoriesText}\n` : ''}
${userContextText ? `–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: ${userContextText}\n` : ''}
${levelContext && levelContext !== 'null' ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç —ç–∫—Ä–∞–Ω–∞/—É—Ä–æ–∫–∞: ${levelContext}\n` : ''}
${quoteBlock ? `–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è: ${quoteBlock}\n` : ''}

## –ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞:
- –ë–µ–∑ —Ç–∞–±–ª–∏—Ü, —ç–º–æ–¥–∑–∏ –∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑. 2‚Äì5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–µ–≤ –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∂–∏ –æ–¥–∏–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–º–∏–∫—Ä–æ‚Äë–¥–µ–π—Å—Ç–≤–∏–µ) c —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Å—Ä–æ–∫–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ 1‚Äì3 –¥–Ω—è.
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ –æ–¥–Ω–æ–º—É —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É –ø—É–Ω–∫—Ç—É.
- –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è, —Å–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–ø–æ–º–Ω–∏ –µ–º—É, —á—Ç–æ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∑–∞–≤–∏—Å–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—É—Ä—Å–æ–º.
–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤—ã—à–µ (–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –ü–µ—Ä—Å–æ–Ω–∞, –ü–∞–º—è—Ç—å, –ò—Ç–æ–≥–∏) –∏ –æ—Ç–≤–µ—á–∞–π –ø–æ –Ω–∏–º.`;

    // –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ú–∞–∫—Å–∞ –ø–æ –≤–µ—Ä—Å–∏—è–º —Ü–µ–ª–∏ (v2/v3/v4)
    let goalVersion: number | null = null;
    try {
      const m1 = typeof userContextText === 'string' ? userContextText.match(/goal_version\s*[:=]\s*(\d+)/i) : null;
      if (m1 && m1[1]) goalVersion = parseInt(m1[1]);
      if (!goalVersion && goalBlock) {
        const m2 = goalBlock.match(/–í–µ—Ä—Å–∏—è —Ü–µ–ª–∏:\s*v(\d+)/i);
        if (m2 && m2[1]) goalVersion = parseInt(m2[1]);
      }
    } catch (_) {}

    let systemPrompt = isMax ? systemPromptAlex : systemPromptLeo;
    if (isMax) {
      const v2Rules = `–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ v2 (–ú–µ—Ç—Ä–∏–∫–∏):
‚Äî –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∞ –Ω–∞–∑–≤–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ (–≤—ã—Ä—É—á–∫–∞, –∫–ª–∏–µ–Ω—Ç—ã, –∫–æ–Ω–≤–µ—Ä—Å–∏—è, –≤—Ä–µ–º—è –∏ —Ç.–ø.)
‚Äî –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –∑–∞–¥–∞–Ω—ã –¢–ï–ö–£–©–ï–ï –∏ –¶–ï–õ–ï–í–û–ï –∑–Ω–∞—á–µ–Ω–∏—è; –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, –µ—Å–ª–∏ —Ä–æ—Å—Ç >200% –∑–∞ –º–µ—Å—è—Ü
‚Äî –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (2‚Äì3 —Å—Ç—Ä–æ–∫–∏), –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞`;
      const v3Rules = `–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ v3 (SMART‚Äë–ø–ª–∞–Ω):
‚Äî –°—Ñ–æ—Ä–º–∏—Ä—É–π 4 –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –º–∏–Ω–∏‚Äë—Ü–µ–ª–∏ –∏ –ø–æ 2‚Äì3 –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
‚Äî –ü—Ä–æ–≤–µ—Ä—å —Å–≤—è–∑–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª—å (–Ω–µ–¥–µ–ª—è n –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ–¥–µ–ª–µ n+1)
‚Äî –û—Ç–≤–µ—Ç –∫—Ä–∞—Ç–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å–ø–∏—Å–∫–æ–º`;
      const v4Rules = `–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ v4 (–§–∏–Ω–∞–ª):
‚Äî –°–ø—Ä–æ—Å–∏ –æ—Ü–µ–Ω–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ 1‚Äì10 –∏ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞
‚Äî –ï—Å–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å <7 ‚Äî —É—Ç–æ—á–Ω–∏ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–∏–Ω —à–∞–≥ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
‚Äî –û—Ç–≤–µ—Ç 2‚Äì4 —Å—Ç—Ä–æ–∫–∏, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑`;
      systemPrompt = systemPromptAlex + "\n\n" + [v2Rules, v3Rules, v4Rules].join("\n\n");
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîß DEBUG: –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', {
      bot: isMax ? 'max' : 'leo',
      maxCompletedLevel: maxCompletedLevel,
      hasRagContext: Boolean(ragContext),
      ragContextLength: ragContext ? ragContext.length : 0,
      hasUserContext: Boolean(userContextText),
      hasLevelContext: Boolean(levelContext),
      hasMemories: Boolean(memoriesText),
      hasSummaries: Boolean(recentSummaries),
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    console.log('üîß DEBUG: –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', {
      userContextText: userContextText ? `"${userContextText.substring(0, 100)}..."` : '–ù–ï–¢',
      levelContext: levelContext ? `"${levelContext}"` : '–ù–ï–¢',
      ragContext: ragContext ? `"${ragContext.substring(0, 100)}..."` : '–ù–ï–¢',
    });

    // --- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    const apiKey = Deno.env.get("OPENAI_API_KEY");
    if (!apiKey || apiKey.trim().length < 20) {
      console.error("OpenAI API key is not configured or too short");
      return new Response(
        JSON.stringify({ error: "openai_config_error", details: "OpenAI API key is missing or invalid" }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } },
      );
    }

    try {
      // Compose chat with enhanced system prompt
      const completion = await openai.chat.completions.create({
        model: Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini",
        temperature: parseFloat(Deno.env.get("OPENAI_TEMPERATURE") || "0.4"),
        messages: [
          { role: "system", content: systemPrompt },
          ...messages,
        ],
      });

      const assistantMessage = completion.choices[0].message;
      const usage = completion.usage; // prompt/completion/total tokens
      const model = Deno.env.get("OPENAI_MODEL") || "gpt-4.1-mini";
      const cost = calculateCost(usage, model);

      // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ chips (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ú–∞–∫—Å–∞
      let recommended_chips: string[] | undefined = undefined;
      if (isMax) {
        const v = goalVersion;
        if (v === 2) {
          recommended_chips = ['üí∞ –í—ã—Ä—É—á–∫–∞', 'üë• –ö–æ–ª-–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤', '‚è± –í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á–∏', 'üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è %', '‚úèÔ∏è –î—Ä—É–≥–æ–µ'];
        } else if (v === 3) {
          recommended_chips = ['–ù–µ–¥–µ–ª—è 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–ù–µ–¥–µ–ª—è 2: –ó–∞–ø—É—Å–∫', '–ù–µ–¥–µ–ª—è 3: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ù–µ–¥–µ–ª—è 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'];
        } else if (v === 4) {
          recommended_chips = ['–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å 7/10', '–ù–∞—á–∞—Ç—å –∑–∞–≤—Ç—Ä–∞', '–°—Ç–∞—Ä—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'];
        }
      }

      console.log('üîß DEBUG: –û—Ç–≤–µ—Ç –æ—Ç OpenAI:', assistantMessage.content?.substring(0, 100));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–æ –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π chatId
      await saveAIMessageData(userId, chatId, null, usage, cost, model, bot, 'chat');

      return new Response(
        JSON.stringify({ message: assistantMessage, usage, ...(recommended_chips ? { recommended_chips } : {}) }),
        {
          status: 200,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        },
      );
    } catch (openaiErr: any) {
      const short = (openaiErr?.message || String(openaiErr)).slice(0, 240);
      console.error("ERR openai_chat", { message: short });
      return new Response(
        JSON.stringify({ error: "openai_error", details: short }),
        { status: 502, headers: { ...corsHeaders, "Content-Type": "application/json" } },
      );
    }
  } catch (err) {
    console.error("ERR function", { message: String(err?.message || err).slice(0, 240) });
    return new Response(
      JSON.stringify({ error: "Internal error", details: err.message }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      },
    );
  }
}); 