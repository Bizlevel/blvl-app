import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:sentry_flutter/sentry_flutter.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:bizlevel/widgets/common/milestone_celebration.dart';

import 'package:bizlevel/providers/cases_provider.dart';
import 'package:bizlevel/providers/levels_provider.dart';
import 'package:bizlevel/services/supabase_service.dart';
import 'package:bizlevel/providers/auth_provider.dart';
import 'package:bizlevel/theme/color.dart';
import 'package:bizlevel/screens/leo_dialog_screen.dart';
import 'package:bizlevel/providers/user_skills_provider.dart';
import 'package:bizlevel/widgets/lesson_widget.dart'; // üÜï –î–ª—è –≤–∏–¥–µ–æ
import 'package:bizlevel/models/lesson_model.dart'; // üÜï –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mock —É—Ä–æ–∫–∞

class MiniCaseScreen extends ConsumerStatefulWidget {
  final int caseId;
  const MiniCaseScreen({super.key, required this.caseId});

  @override
  ConsumerState<MiniCaseScreen> createState() => _MiniCaseScreenState();
}

class _MiniCaseScreenState extends ConsumerState<MiniCaseScreen> {
  Map<String, dynamic>? _caseMeta;
  Map<String, dynamic>?
      _script; // intro/context/questions/final from mini_cases.script
  // ignore: unused_field
  bool _dialogOpened = false;
  bool _loading = true;

  // üÜï –î–ª—è –¥–≤—É—Ö–±–ª–æ–∫–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  late PageController _pageController;
  // ignore: unused_field
  int _currentPage = 0; // –ì–æ—Ç–æ–≤–æ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤ (–±—É–¥—É—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ)
  // ignore: unused_field
  bool _videoWatched =
      false; // –ì–æ—Ç–æ–≤–æ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–±—É–¥—É—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ)

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
    _bootstrap();
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  Future<void> _bootstrap() async {
    try {
      try {
        Sentry.addBreadcrumb(Breadcrumb(
          category: 'case',
          level: SentryLevel.info,
          message: 'case_opened',
          data: {'caseId': widget.caseId},
        ));
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
      await ref.read(caseActionsProvider).start(widget.caseId);
    } catch (e, st) {
      try {
        await Sentry.captureException(e, stackTrace: st);
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        debugPrint('DEBUG: Exception (Sentry not configured): $e');
      }
    }

    try {
      final data = await Supabase.instance.client
          .from('mini_cases')
          .select(
              'id, title, after_level, skill_name, estimated_minutes, script, '
              'vimeo_id, video_url') // üÜï –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –≤–∏–¥–µ–æ
          .eq('id', widget.caseId)
          .maybeSingle();
      if (!mounted) return;
      setState(() {
        _caseMeta = data == null ? {} : Map<String, dynamic>.from(data);
        final s = (_caseMeta?['script']);
        if (s is Map) {
          _script = Map<String, dynamic>.from(s);
        }
        _loading = false;
      });
    } catch (e, st) {
      try {
        await Sentry.captureException(e, stackTrace: st);
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        debugPrint('DEBUG: Exception (Sentry not configured): $e');
      }
      if (!mounted) return;
      setState(() => _loading = false);
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏‚Äë–∫–µ–π—Å')));
    }
  }

  @override
  Widget build(BuildContext context) {
    final title = _caseMeta?['title'] as String? ?? '–ú–∏–Ω–∏‚Äë–∫–µ–π—Å';
    return Scaffold(
      appBar: AppBar(
        title: Text(title),
        actions: [
          TextButton(
            onPressed: _onSkip,
            child: const Text('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'),
          ),
        ],
        backgroundColor: AppColor.appBarColor,
      ),
      backgroundColor: AppColor.appBgColor,
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : PageView(
              controller: _pageController,
              physics:
                  const NeverScrollableScrollPhysics(), // üîí –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–≤–∞–π–ø—ã
              onPageChanged: (index) {
                setState(() => _currentPage = index);
                // Breadcrumb –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                try {
                  Sentry.addBreadcrumb(Breadcrumb(
                    category: 'case',
                    message: index == 0
                        ? 'case_intro_block_opened'
                        : 'case_video_block_opened',
                    data: {'caseId': widget.caseId, 'blockIndex': index},
                  ));
                } catch (_) {}
              },
              children: [
                _buildIntroBlock(), // –ë–ª–æ–∫ 1: –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –û–ø–∏—Å–∞–Ω–∏–µ + "–î–∞–ª–µ–µ"
                _buildVideoBlock(), // –ë–ª–æ–∫ 2: –í–∏–¥–µ–æ + "–†–µ—à–∏—Ç—å —Å –õ–µ–æ"
              ],
            ),
    );
  }

  /// üÜï –ë–ª–æ–∫ 1: Intro (–ö–∞—Ä—Ç–∏–Ω–∫–∞ + –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ")
  Widget _buildIntroBlock() {
    final introText = _script?['intro'] is Map
        ? ((_script?['intro'] as Map)['text']?.toString() ?? '')
        : '';

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          const SizedBox(height: 12),

          // –ö–∞—Ä—Ç–∏–Ω–∫–∞
          _buildCaseImage(slot: 2),

          const SizedBox(height: 16),

          // –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ intro, –±–µ–∑ context)
          if (introText.isNotEmpty)
            Text(
              introText,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w600,
              ),
            ),
          if (introText.isEmpty)
            const Text(
              '–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–µ–π—Å–∞ –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ä–µ—à–µ–Ω–∏—é.',
              style: TextStyle(fontSize: 16),
            ),

          const SizedBox(height: 24),

          // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ë–ª–æ–∫ 2
          ElevatedButton.icon(
            onPressed: () {
              _pageController.nextPage(
                duration: const Duration(milliseconds: 300),
                curve: Curves.easeInOut,
              );
            },
            icon: const Icon(Icons.arrow_forward),
            label: const Text('–î–∞–ª–µ–µ'),
            style: ElevatedButton.styleFrom(
              minimumSize: const Size(double.infinity, 48),
            ),
          ),
        ],
      ),
    );
  }

  /// üÜï –ë–ª–æ–∫ 2: –í–∏–¥–µ–æ + CTA "–†–µ—à–∏—Ç—å —Å –õ–µ–æ"
  Widget _buildVideoBlock() {
    // –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π LessonModel –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LessonWidget
    final vimeoId = _caseMeta?['vimeo_id'] as String?;
    final videoUrl = _caseMeta?['video_url'] as String?;

    final mockLesson = LessonModel(
      id: widget.caseId * 1000, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      levelId: widget.caseId,
      order: 1,
      title: _caseMeta?['title'] as String? ?? '–ú–∏–Ω–∏-–∫–µ–π—Å',
      description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ —Ä–µ—à–µ–Ω–∏–µ–º –∫–µ–π—Å–∞',
      videoUrl: videoUrl,
      vimeoId: vimeoId,
      durationMinutes: _caseMeta?['estimated_minutes'] as int? ?? 10,
      quizQuestions: [],
      correctAnswers: [],
    );

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        // –í–∏–¥–µ–æ (–∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞)
        Expanded(
          child: LessonWidget(
            lesson: mockLesson,
            onWatched: () {
              // –ü–æ–º–µ—á–∞–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
              setState(() => _videoWatched = true);
            },
          ),
        ),

        // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // –ö–Ω–æ–ø–∫–∞ "–†–µ—à–∏—Ç—å —Å –õ–µ–æ"
                ElevatedButton.icon(
                  onPressed: _openDialog,
                  icon: const Icon(Icons.psychology_alt_outlined),
                  label: const Text('–†–µ—à–∏—Ç—å —Å –õ–µ–æ'),
                  style: ElevatedButton.styleFrom(
                    minimumSize: const Size(double.infinity, 48),
                  ),
                ),

                const SizedBox(height: 8),

                // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é)
                TextButton.icon(
                  onPressed: () {
                    _pageController.previousPage(
                      duration: const Duration(milliseconds: 300),
                      curve: Curves.easeInOut,
                    );
                  },
                  icon: const Icon(Icons.arrow_back),
                  label: const Text('–ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é'),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Future<void> _openDialog() async {
    try {
      try {
        Sentry.addBreadcrumb(Breadcrumb(
          category: 'case',
          level: SentryLevel.info,
          message: 'case_dialog_started',
          data: {'caseId': widget.caseId},
        ));
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
      final systemPrompt = _buildCaseSystemPrompt();
      final firstPrompt = _firstTaskPromptFromScript();
      // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
      final List<String> prompts = [];
      try {
        final qs = _script?['questions'];
        if (qs is List) {
          for (final q in qs) {
            if (q is Map && q['prompt'] is String) {
              prompts.add((q['prompt'] as String).trim());
            }
          }
        }
      } catch (_) {}
      final List<String> contexts = [
        '',
        (_script?['q2_context']?.toString() ?? ''),
        (_script?['q3_context']?.toString() ?? ''),
        (_script?['q4_context']?.toString() ?? ''),
      ];
      final result = await Navigator.of(context).push(MaterialPageRoute(
        builder: (_) => LeoDialogScreen(
          bot: 'leo',
          caseMode: true,
          systemPrompt: systemPrompt,
          firstPrompt: firstPrompt,
          casePrompts: prompts,
          caseContexts: contexts,
          casePreface: _buildChecklistPreface(),
          finalStory: _script?['final_story']?.toString(),
        ),
        fullscreenDialog: true,
      ));
      if (!mounted) return;
      if (result == 'case_final') {
        await _complete();
        return;
      }
      setState(() => _dialogOpened = true);
    } catch (e, st) {
      try {
        await Sentry.captureException(e, stackTrace: st);
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        debugPrint('DEBUG: Exception (Sentry not configured): $e');
      }
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥')));
    }
  }

  // String? _buildChecklistPreface() {
  //   try {
  //     final list = _script?['checklist'];
  //     if (list is List && list.isNotEmpty) {
  //       final b = StringBuffer('–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ì—É–ª—å–Ω–∞—Ä—ã:\n');
  //       for (final item in list) {
  //         b.writeln(item.toString());
  //       }
  //       return b.toString().trim();
  //     }
  //   } catch (_) {}
  //   return null;
  // }
  String? _buildChecklistPreface() {
    try {
      final list = _script?['checklist'];
      if (list is List && list.isNotEmpty) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Ç–∏–ø —Å–ø–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–µ–π—Å–∞
        String characterName;
        String listType;
        switch (widget.caseId) {
          case 1:
            characterName = '–î–∞—É–ª–µ—Ç–∞';
            listType = '–°–ø–∏—Å–æ–∫ –¥–µ–ª';
            break;
          case 2:
            characterName = '–ì—É–ª—å–Ω–∞—Ä—ã';
            listType = '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è';
            break;
          case 3:
            characterName = '–†—É—Å–ª–∞–Ω–∞';
            listType = '–ü–ª–∞–Ω';
            break;
          default:
            characterName = '–ø–µ—Ä—Å–æ–Ω–∞–∂–∞';
            listType = '–°–ø–∏—Å–æ–∫';
        }

        final b = StringBuffer('$listType $characterName:\n');
        for (final item in list) {
          b.writeln(item.toString());
        }
        return b.toString().trim();
      }
    } catch (_) {}
    return null;
  }

  String _buildCaseSystemPrompt() {
    final title = _caseMeta?['title']?.toString() ?? '';
    final afterLevel = _caseMeta?['after_level']?.toString() ?? '';
    final skill = _caseMeta?['skill_name']?.toString() ?? '';
    final contextText = _script?['context'] is Map
        ? ((_script?['context'] as Map)['text']?.toString() ?? '')
        : '';
    final user = Supabase.instance.client.auth.currentUser;

    final hasProfile = user != null;
    if (!hasProfile) {
      return '–†–µ–∂–∏–º: case_facilit–∞—Ç–æ—Ä. –¢—ã ‚Äî –õ–µ–æ, —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä –º–∏–Ω–∏‚Äë–∫–µ–π—Å–∞. '
          '–ö–µ–π—Å: "$title" (–ø–æ—Å–ª–µ —É—Ä–æ–≤–Ω—è $afterLevel, –Ω–∞–≤—ã–∫: $skill). '
          '${contextText.isNotEmpty ? '–¢–µ–∫—Å—Ç –∫–µ–π—Å–∞: $contextText ' : ''}'
          '‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é. '
          '–°–Ω–∞—á–∞–ª–∞ –ø–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–∏–º—è, —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ü–µ–ª—å, –æ–ø—ã—Ç), '
          '–∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –∫–µ–π—Å—É. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–ª–Ω–æ—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è. '
          '–ü—Ä–∞–≤–∏–ª–∞: –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ ¬´–¢–µ–∫—Å—Ç–∞ –∫–µ–π—Å–∞¬ª, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏/–ø–∞–º—è—Ç—å/RAG. '
          '–ó–∞–¥–∞–≤–∞–π —á—ë—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ü–µ–Ω–∏–≤–∞–π –æ—Ç–≤–µ—Ç—ã –ø–æ 5‚Äë—É—Ä–æ–≤–Ω–µ–≤–æ–π —à–∫–∞–ª–µ –∫–∞—á–µ—Å—Ç–≤–∞. '
          '–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–∏–π (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –¥–∞–≤–∞–π –º—è–≥–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.';
    }

    return '–†–µ–∂–∏–º: case_facilit–∞—Ç–æ—Ä. –¢—ã ‚Äî –õ–µ–æ, —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä –º–∏–Ω–∏‚Äë–∫–µ–π—Å–∞. '
        '–ö–µ–π—Å: "$title" (–ø–æ—Å–ª–µ —É—Ä–æ–≤–Ω—è $afterLevel, –Ω–∞–≤—ã–∫: $skill). '
        '${contextText.isNotEmpty ? '–¢–µ–∫—Å—Ç –∫–µ–π—Å–∞: $contextText ' : ''}'
        '–ü—Ä–∞–≤–∏–ª–∞: –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ ¬´–¢–µ–∫—Å—Ç–∞ –∫–µ–π—Å–∞¬ª, –∏–≥–Ω–æ—Ä–∏—Ä—É–π –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏/–ø–∞–º—è—Ç—å/RAG. '
        '–ê–ª–≥–æ—Ä–∏—Ç–º: –¥–∞–π ¬´–ó–∞–¥–∞–Ω–∏–µ 1¬ª –∫–∞–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç; –æ—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç (EXCELLENT/GOOD/ACCEPTABLE/WEAK/INVALID). '
        '–ü—Ä–∏ EXCELLENT/GOOD ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é (–≤–µ—Ä–Ω–∏ –º–∞—Ä–∫–µ—Ä [CASE:NEXT]); '
        '–ø—Ä–∏ ACCEPTABLE ‚Äî –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ (–≤–µ—Ä–Ω–∏ [CASE:NEXT]); '
        '–ø—Ä–∏ WEAK/INVALID ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –Ω–∞–≤–æ–¥—è—â–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–æ—Ä–∞–±–æ—Ç–∫–∏ (–≤–µ—Ä–Ω–∏ [CASE:RETRY]). '
        '–í —Ñ–∏–Ω–∞–ª–µ –≤—ã–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥ –∏ –≤–µ—Ä–Ω–∏ –º–∞—Ä–∫–µ—Ä [CASE:FINAL]. '
        '–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∫—Ä–∞—Ç–∫–∏–π (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –±–µ–∑ —Ç–∞–±–ª–∏—Ü/—ç–º–æ–¥–∑–∏.';
  }

  String _firstTaskPromptFromScript() {
    try {
      final qs = _script?['questions'];
      if (qs is List && qs.isNotEmpty) {
        final first = qs.first;
        if (first is Map && first['prompt'] is String) {
          return (first['prompt'] as String).trim();
        }
      }
    } catch (_) {}
    return _fallbackFirstTaskPrompt();
  }

  String _fallbackFirstTaskPrompt() {
    switch (widget.caseId) {
      case 1:
        return '–ó–∞–¥–∞–Ω–∏–µ 1: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é –î–∞—É–ª–µ—Ç–∞. –ö–∞–∫–∞—è –ì–õ–ê–í–ù–ê–Ø –ø—Ä–æ–±–ª–µ–º–∞ –º–µ—à–∞–µ—Ç –µ–º—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å–æ–º? (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)';
      case 2:
        return '–ó–∞–¥–∞–Ω–∏–µ 1: –í —á—ë–º –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ì—É–ª—å–Ω–∞—Ä—ã? –ü–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –ø–æ–∫—É–ø–∞—é—Ç, —Ö–æ—Ç—è —Ä–∞–±–æ—Ç—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ? (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)';
      case 3:
        return '–ó–∞–¥–∞–Ω–∏–µ 1: –í —á–µ–º –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –†—É—Å–ª–∞–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏? –ß—Ç–æ –æ–Ω –Ω–µ —É—á–µ–ª? (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)';
      default:
        return '–ó–∞–¥–∞–Ω–∏–µ 1: –î–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).';
    }
  }

  Widget _buildCaseImage({required int slot}) {
    final path = 'assets/images/cases/case_${widget.caseId}_$slot.png';
    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: Container(
        height: 180,
        decoration: const BoxDecoration(
          color: Colors.white,
          boxShadow: [
            BoxShadow(
                color: Color(0x11000000), blurRadius: 10, offset: Offset(0, 6)),
          ],
        ),
        child: Image.asset(
          path,
          fit: BoxFit.cover,
          errorBuilder: (context, _, __) => const Center(
            child: Icon(Icons.broken_image_outlined,
                size: 56, color: Colors.black26),
          ),
        ),
      ),
    );
  }

  Future<void> _complete() async {
    try {
      try {
        Sentry.addBreadcrumb(Breadcrumb(
          category: 'case',
          level: SentryLevel.info,
          message: 'case_completed',
          data: {'caseId': widget.caseId},
        ));
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
      await ref.read(caseActionsProvider).complete(widget.caseId);

      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ 3 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∫–µ–π—Å–∞ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
      try {
        final client = Supabase.instance.client;
        final before = await client
            .from('gp_bonus_grants')
            .select('rule_key')
            .eq('rule_key', 'all_three_cases_completed')
            .maybeSingle();

        await client.rpc('gp_bonus_claim',
            params: {'p_rule_key': 'all_three_cases_completed'});

        final after = await client
            .from('gp_bonus_grants')
            .select('rule_key')
            .eq('rule_key', 'all_three_cases_completed')
            .maybeSingle();

        final newlyGranted = before == null && after != null;
        if (newlyGranted && mounted) {
          showDialog(
            context: context,
            barrierDismissible: true,
            builder: (_) => Dialog(
              backgroundColor: Colors.transparent,
              insetPadding: const EdgeInsets.all(16),
              child: MilestoneCelebration(
                gpGain: 200,
                onClose: () => Navigator.of(context).maybePop(),
              ),
            ),
          );
        }
      } catch (_) {}

      // –û–±–Ω–æ–≤–ª—è–µ–º current_level –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–µ–π—Å–∞
      try {
        final after = _caseMeta?['after_level'] as int?;
        if (after != null) {
          // –ù–∞—Ö–æ–¥–∏–º level_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è (after + 1)
          final nextLevelNumber = after + 1;
          // –ü–æ–ª—É—á–∞–µ–º level_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
          final levelId =
              await SupabaseService.levelIdFromNumber(nextLevelNumber);
          // Guard: –ø–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ nextLevelNumber (—á–∏—Å–ª–æ —É—Ä–æ–≤–Ω–µ–π —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö + 1)
          try {
            final user = await ref.read(currentUserProvider.future);
            final currNum = await SupabaseService.resolveCurrentLevelNumber(
                user?.currentLevel);
            if (levelId != null && currNum < nextLevelNumber) {
              await SupabaseService.completeLevel(levelId);
            }
          } catch (_) {}
        }
      } catch (_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
      }

      // –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—à–Ω–∏ –∏ —É—Ä–æ–≤–Ω–µ–π, –ü–û–¢–û–ú –ø–µ—Ä–µ—Ö–æ–¥–∏–º
      try {
        // ignore: unused_result
        ref.invalidate(towerNodesProvider);
        // ignore: unused_result
        ref.invalidate(levelsProvider);
        // ignore: unused_result
        ref.invalidate(nextLevelToContinueProvider);
        // ignore: unused_result
        ref.invalidate(currentUserProvider);
        // ignore: unused_result
        ref.invalidate(userSkillsProvider);
        // ignore: unused_result
        ref.invalidate(caseStatusProvider(widget.caseId));
      } catch (_) {}

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
      await Future.delayed(const Duration(milliseconds: 100));

      final after = _caseMeta?['after_level'] as int?;
      final target = after != null ? after + 1 : null;
      if (!mounted) return;
      if (target != null) {
        context.go('/tower?scrollTo=$target');
      } else {
        context.go('/tower');
      }
    } catch (e, st) {
      try {
        await Sentry.captureException(e, stackTrace: st);
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        debugPrint('DEBUG: Exception (Sentry not configured): $e');
      }
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∏–Ω–∏‚Äë–∫–µ–π—Å')));
    }
  }

  Future<void> _onSkip() async {
    try {
      try {
        Sentry.addBreadcrumb(Breadcrumb(
          category: 'case',
          level: SentryLevel.info,
          message: 'case_skipped',
          data: {'caseId': widget.caseId},
        ));
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      }
      await ref.read(caseActionsProvider).skip(widget.caseId);
      final after = _caseMeta?['after_level'] as int?;
      final target = after != null ? after + 1 : null;
      if (!mounted) return;
      if (target != null) {
        context.go('/tower?scrollTo=$target');
      } else {
        context.go('/tower');
      }
    } catch (e, st) {
      try {
        await Sentry.captureException(e, stackTrace: st);
      } catch (_) {
        // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        debugPrint('DEBUG: Exception (Sentry not configured): $e');
      }
      if (!mounted) return;
      ScaffoldMessenger.of(context)
          .showSnackBar(const SnackBar(content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')));
    }
  }
}
