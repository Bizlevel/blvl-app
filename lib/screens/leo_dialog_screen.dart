import 'dart:async';

import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:bizlevel/providers/leo_service_provider.dart';
import 'package:bizlevel/theme/color.dart';
import 'package:bizlevel/widgets/leo_message_bubble.dart';
import 'package:bizlevel/services/leo_service.dart';
import 'package:bizlevel/providers/gp_providers.dart';

/// Dialog screen for chatting with Leo assistant.
/// Supports pagination (30 messages per page), unread counter reset,
/// message limit enforcement and auto-scroll to bottom.
class LeoDialogScreen extends ConsumerStatefulWidget {
  final String? chatId;
  final String? userContext;
  final String? levelContext;
  final String bot; // 'leo' | 'alex'
  final bool caseMode; // —Ä–µ–∂–∏–º –º–∏–Ω–∏‚Äë–∫–µ–π—Å–∞: –Ω–µ —Ç—Ä–∞—Ç–∏–º –ª–∏–º–∏—Ç—ã, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Ç—ã
  final String? systemPrompt; // –æ–ø—Ü. —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–¥–ª—è –∫–µ–π—Å–∞)
  final bool
      embedded; // –∫–æ–≥–¥–∞ true ‚Äî —Ä–µ–Ω–¥–µ—Ä –±–µ–∑ Scaffold/AppBar (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–∏–¥)
  final ValueChanged<String>?
      onAssistantMessage; // –∫–æ–ª–±—ç–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  final List<String>?
      recommendedChips; // –æ–ø—Ü. —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (fallback –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)

  const LeoDialogScreen({
    super.key,
    this.chatId,
    this.userContext,
    this.levelContext,
    this.bot = 'leo',
    this.caseMode = false,
    this.systemPrompt,
    this.embedded = false,
    this.onAssistantMessage,
    this.recommendedChips,
  });

  @override
  ConsumerState<LeoDialogScreen> createState() => _LeoDialogScreenState();
}

class _LeoDialogScreenState extends ConsumerState<LeoDialogScreen> {
  static const _pageSize = 30;

  String? _chatId;

  final _scrollController = ScrollController();
  final _inputController = TextEditingController();
  final _inputFocus = FocusNode();
  final List<Map<String, dynamic>> _messages = [];

  bool _isSending = false;
  bool _isLoadingMore = false;
  bool _hasMore =
      false; // –≤–∫–ª—é—á–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î
  int _page = 0; // 0-based page counter
  int _remaining = -1; // ‚àí1 unknown (–ª–∏–º–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã)

  late final LeoService _leo;

  // –î–æ–±–∞–≤–ª—è–µ–º debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
  Timer? _debounceTimer;
  static const Duration _debounceDelay = Duration(milliseconds: 500);

  @override
  void initState() {
    super.initState();
    _leo = ref.read(leoServiceProvider);
    // –õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω—ã (—ç—Ç–∞–ø 39.1)
    _chatId = widget.chatId;
    print('üîß DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è chatId: $_chatId');
    print('üîß DEBUG: widget.chatId: ${widget.chatId}');
    print('üîß DEBUG: –¢–∏–ø widget.chatId: ${widget.chatId.runtimeType}');
    // –ê–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: –∫–µ–π—Å ‚Üí –∑–∞–¥–∞–Ω–∏–µ; –∏–Ω–∞—á–µ –ê–ª–µ–∫—Å.
    if (widget.caseMode && _chatId == null && _messages.isEmpty) {
      _messages.add({
        'role': 'assistant',
        'content': '–ù–∞—á–Ω—ë–º —Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –û—Ç–≤–µ—Ç—å—Ç–µ –≤ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.',
      });
    } else if (widget.bot == 'alex' && _chatId == null && _messages.isEmpty) {
      _messages.add({
        'role': 'assistant',
        'content':
            '–Ø ‚Äî –ê–ª–µ–∫—Å, —Ç—Ä–µ–∫–µ—Ä —Ü–µ–ª–∏ BizLevel. –ü–æ–º–æ–≥–∞—é –∫—Ä–∏—Å—Ç–∞–ª–ª–∏–∑–æ–≤–∞—Ç—å —Ü–µ–ª—å –∏ –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–º–ø 28 –¥–Ω–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∏—Ç—å—Å—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –±–ª–∏–∂–∞–π—à–∏–π —à–∞–≥.',
      });
    }
    if (_chatId != null) {
      _loadMessages();
    }
  }

  @override
  void dispose() {
    _debounceTimer?.cancel();
    _inputFocus.dispose();
    super.dispose();
  }

  // –õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –º–µ—Ç–æ–¥ —É–¥–∞–ª—ë–Ω

  Future<void> _loadMessages() async {
    if (_chatId == null) return;
    final rangeStart = _page * _pageSize;
    final rangeEnd = rangeStart + _pageSize - 1;

    final data = await Supabase.instance.client
        .from('leo_messages')
        .select('role, content, created_at')
        .eq('chat_id', _chatId!)
        .order('created_at', ascending: false)
        .range(rangeStart, rangeEnd);

    final fetched = List<Map<String, dynamic>>.from(
        data.map((e) => Map<String, dynamic>.from(e as Map)));

    if (!mounted) return;
    setState(() {
      _hasMore = fetched.length == _pageSize;
      _page += 1;
      // Reverse to chronological order –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ (–ø–æ —Ä–æ–ª–∏+–∫–æ–Ω—Ç–µ–Ω—Ç—É), —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
      final chronological = fetched.reversed
          .map((e) => {'role': e['role'], 'content': e['content']})
          .toList();
      final existingKeys =
          _messages.map((m) => '${m['role']}::${m['content']}').toSet();
      final toAdd = <Map<String, dynamic>>[];
      for (final m in chronological) {
        final key = '${m['role']}::${m['content']}';
        if (!existingKeys.contains(key)) {
          toAdd.add(m);
          existingKeys.add(key);
        }
      }
      if (toAdd.isNotEmpty) {
        _messages.insertAll(0, toAdd);
      }
    });

    // Auto-scroll only after first page load
    if (_page == 1) _scrollToBottom();
  }

  Future<void> _loadMore() async {
    if (_isLoadingMore || !_hasMore) return;
    setState(() => _isLoadingMore = true);
    await _loadMessages();
    if (mounted) setState(() => _isLoadingMore = false);
  }

  void _scrollToBottom() => WidgetsBinding.instance.addPostFrameCallback((_) {
        if (_scrollController.hasClients) {
          _scrollController.animateTo(
            _scrollController.position.maxScrollExtent,
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeOut,
          );
        }
      });

  Future<void> _sendMessage() async {
    print('üîß DEBUG: _sendMessage –≤—ã–∑–≤–∞–Ω');
    print('üîß DEBUG: text = "${_inputController.text.trim()}"');
    print('üîß DEBUG: _isSending = $_isSending');
    print('üîß DEBUG: _remaining = $_remaining');

    // –õ–∏–º–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

    final text = _inputController.text.trim();
    if (text.isEmpty || _isSending) return;

    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä debounce
    _debounceTimer?.cancel();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä debounce
    _debounceTimer = Timer(_debounceDelay, () async {
      await _sendMessageInternal(text);
    });
  }

  Future<void> _sendMessageInternal(String text) async {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (_isSending || !mounted) return;

    setState(() {
      _isSending = true;
      _messages.add({'role': 'user', 'content': text});
    });
    _inputController.clear();
    _scrollToBottom();

    try {
      // –í —Ä–µ–∂–∏–º–µ –∫–µ–π—Å–∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º —á–∞—Ç
      if (!widget.caseMode) {
        if (_chatId == null) {
          _chatId = await _leo.saveConversation(
              role: 'user', content: text, bot: widget.bot);
        } else {
          await _leo.saveConversation(
              chatId: _chatId, role: 'user', content: text);
        }
      }

      // Get assistant response with RAG if context is available
      String assistantMsg;

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ "null" –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      final cleanUserContext = (widget.userContext == 'null' || widget.userContext?.isEmpty == true) ? '' : (widget.userContext ?? '');
      final cleanLevelContext = (widget.levelContext == 'null' || widget.levelContext?.isEmpty == true) ? '' : (widget.levelContext ?? '');
      
      print('üîß DEBUG: userContext = "${widget.userContext}"');
      print('üîß DEBUG: levelContext = "${widget.levelContext}"');
      print('üîß DEBUG: cleanUserContext = "$cleanUserContext"');
      print('üîß DEBUG: cleanLevelContext = "$cleanLevelContext"');
      print('üîß DEBUG: userContext.isNotEmpty = ${cleanUserContext.isNotEmpty}');
      print('üîß DEBUG: levelContext.isNotEmpty = ${cleanLevelContext.isNotEmpty}');

      // –ï–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤: —Å–µ—Ä–≤–µ—Ä –≤—ã–ø–æ–ª–Ω–∏—Ç RAG + –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      print('üîß DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ sendMessageWithRAG...');
      print('üîß DEBUG: messages count: ${_buildChatContext().length}');
      print('üîß DEBUG: bot: ${widget.bot}');
      
      final response = await _leo.sendMessageWithRAG(
        messages: _buildChatContext(),
        userContext: cleanUserContext,
        levelContext: cleanLevelContext,
        bot: widget.bot,
        skipSpend: widget.caseMode,
      );
      
      print('üîß DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç sendMessageWithRAG');
      print('üîß DEBUG: response keys: ${response.keys.toList()}');
      assistantMsg = response['message']['content'] as String? ?? '';
      print('üîß DEBUG: assistantMsg length: ${assistantMsg.length}');

      if (!widget.caseMode) {
        await _leo.saveConversation(
            chatId: _chatId, role: 'assistant', content: assistantMsg);
      }

      if (!mounted) return;
      setState(() {
        _messages.add({'role': 'assistant', 'content': assistantMsg});
      });
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–∏–º –±–∞–ª–∞–Ω—Å GP –≤ —Ñ–æ–Ω–µ
      try {
        // ignore: unused_result
        ref.invalidate(gpBalanceProvider);
      } catch (_) {}
      // –°–æ–æ–±—â–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—é –æ–± –æ—Ç–≤–µ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–¥–ª—è –ø—Ä–µ—Ñ–∏–ª–ª–∞ —Ñ–æ—Ä–º)
      try {
        widget.onAssistantMessage?.call(assistantMsg);
      } catch (_) {}
      _scrollToBottom();
    } catch (e) {
      print('üîß DEBUG: –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $e');
      print('üîß DEBUG: –¢–∏–ø –æ—à–∏–±–∫–∏: ${e.runtimeType}');
      if (!mounted) return;
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')));
    } finally {
      if (mounted) setState(() => _isSending = false);
    }
  }

  List<Map<String, dynamic>> _buildChatContext() {
    final List<Map<String, dynamic>> ctx = _messages
        .map((m) => {'role': m['role'], 'content': m['content']})
        .toList();
    // –í —Ä–µ–∂–∏–º–µ –º–∏–Ω–∏‚Äë–∫–µ–π—Å–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä–∞ –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (widget.caseMode) {
      final sp = widget.systemPrompt?.trim();
      if (sp != null && sp.isNotEmpty) {
        ctx.insert(0, {'role': 'system', 'content': sp});
      }
    }
    return ctx;
  }

  @override
  Widget build(BuildContext context) {
    if (widget.embedded) {
      // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º: –±–µ–∑ Scaffold/AppBar, —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ
      return Column(
        children: [
          Expanded(child: _buildMessageList()),
          _buildInput(),
        ],
      );
    }
    return Scaffold(
      appBar: AppBar(
        backgroundColor: AppColor.primary,
        title: Row(
          children: [
            CircleAvatar(
              radius: 14,
              backgroundImage: AssetImage(widget.bot == 'max'
                  ? 'assets/images/avatars/avatar_max.png'
                  : 'assets/images/avatars/avatar_leo.png'),
              backgroundColor: Colors.transparent,
            ),
            const SizedBox(width: 8),
            Text(widget.bot == 'max' ? '–ú–∞–∫—Å' : '–õ–µ–æ'),
          ],
        ),
      ),
      body: Column(
        children: [
          Expanded(child: _buildMessageList()),
          _buildInput(),
        ],
      ),
    );
  }

  Widget _buildMessageList() {
    return NotificationListener<ScrollNotification>(
      onNotification: (notif) {
        if (notif.metrics.pixels <= 50 && _hasMore) {
          _loadMore();
        }
        return false;
      },
      child: ListView.builder(
        controller: _scrollController,
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
        itemCount: _messages.length + (_hasMore ? 1 : 0),
        itemBuilder: (context, index) {
          if (_hasMore && index == 0) {
            return Center(
              child: _isLoadingMore
                  ? const Padding(
                      padding: EdgeInsets.all(8.0),
                      child: CircularProgressIndicator())
                  : TextButton(
                      onPressed: _loadMore, child: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë')),
            );
          }
          final msgIndex = _hasMore ? index - 1 : index;
          final msg = _messages[msgIndex];
          final isUser = msg['role'] == 'user';
          return LeoMessageBubble(
              text: msg['content'] as String? ?? '', isUser: isUser);
        },
      ),
    );
  }

  Widget _buildInput() {
    return SafeArea(
      child: Padding(
        padding: const EdgeInsets.fromLTRB(16, 8, 16, 8),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildChipsRow(),
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _inputController,
                    focusNode: _inputFocus,
                    minLines: 1,
                    maxLines: 4,
                    decoration: const InputDecoration(
                      hintText: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
                      border: OutlineInputBorder(),
                    ),
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
                    onSubmitted: (text) {
                      if (text.trim().isNotEmpty && !_isSending) {
                        _sendMessage();
                      }
                    },
                  ),
                ),
                const SizedBox(width: 8),
                _isSending
                    ? const SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator())
                    : IconButton(
                        icon: const Icon(Icons.send),
                        color: AppColor.primary,
                        onPressed: _sendMessage,
                      ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildChipsRow() {
    final chips = _resolveRecommendedChips();
    if (chips.isEmpty) return const SizedBox.shrink();
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Wrap(
        spacing: 8,
        runSpacing: 8,
        children: [
          for (final text in chips)
            ActionChip(
              label: Text(text, overflow: TextOverflow.ellipsis),
              onPressed: () {
                _inputController.text = text;
                _inputController.selection = TextSelection.fromPosition(
                    TextPosition(offset: _inputController.text.length));
                _inputFocus.requestFocus();
              },
            ),
        ],
      ),
    );
  }

  List<String> _resolveRecommendedChips() {
    if (widget.recommendedChips != null &&
        widget.recommendedChips!.isNotEmpty) {
      return widget.recommendedChips!;
    }
    // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ–ª–±—ç–∫: –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–µ—Ä—Å–∏–∏ —Ü–µ–ª–∏ –≤ userContext
    if (widget.bot == 'max') {
      final ctx = widget.userContext ?? '';
      final match = RegExp(r'goal_version:\s*(\d+)').firstMatch(ctx);
      final v = match != null ? int.tryParse(match.group(1) ?? '') : null;
      switch (v) {
        case 2:
          return const [
            'üí∞ –í—ã—Ä—É—á–∫–∞',
            'üë• –ö–æ–ª-–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
            '‚è± –í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á–∏',
            'üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è %',
            '‚úèÔ∏è –î—Ä—É–≥–æ–µ',
          ];
        case 3:
          return const [
            '–ù–µ–¥–µ–ª—è 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            '–ù–µ–¥–µ–ª—è 2: –ó–∞–ø—É—Å–∫',
            '–ù–µ–¥–µ–ª—è 3: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
            '–ù–µ–¥–µ–ª—è 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
          ];
        case 4:
          return const [
            '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å 7/10',
            '–ù–∞—á–∞—Ç—å –∑–∞–≤—Ç—Ä–∞',
            '–°—Ç–∞—Ä—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
          ];
        default:
          return const [];
      }
    }
    return const [];
  }
}
