import 'dart:convert';
import 'dart:io';

import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:sentry_flutter/sentry_flutter.dart';

class NotificationsService {
  NotificationsService._();
  static final NotificationsService instance = NotificationsService._();
  static String? pendingRoute;

  final FlutterLocalNotificationsPlugin _plugin =
      FlutterLocalNotificationsPlugin();

  bool _initialized = false;

  Future<void> initialize() async {
    if (_initialized) return;
    const AndroidInitializationSettings androidInit =
        AndroidInitializationSettings('ic_launcher');
    const DarwinInitializationSettings iosInit = DarwinInitializationSettings();
    const InitializationSettings initSettings = InitializationSettings(
      android: androidInit,
      iOS: iosInit,
    );
    await _plugin.initialize(
      initSettings,
      onDidReceiveNotificationResponse: (details) {
        final payload = details.payload;
        if (payload == null) return;
        try {
          final data = json.decode(payload) as Map<String, dynamic>;
          final route = data['route']?.toString();
          if (route != null && route.isNotEmpty) {
            pendingRoute = route;
          }
          try {
            Sentry.addBreadcrumb(Breadcrumb(
              level: SentryLevel.info,
              category: 'notif',
              message: 'notif_tap',
            ));
          } catch (_) {}
          // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ MyApp —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä.
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –∫—ç—à/—Å—Ç–∞—Ç–∏–∫, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.
          // final route = data['route'];
        } catch (_) {}
      },
    );

    await _ensureAndroidChannels();

    if (Platform.isIOS) {
      await _plugin
          .resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(alert: true, badge: true, sound: true);
    }
    if (Platform.isAndroid) {
      final android = _plugin.resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();
      // Guard: —Ç–æ–ª—å–∫–æ Android 13+
      if ((await android?.areNotificationsEnabled()) == false) {
        try {
          await android?.requestNotificationsPermission();
        } catch (_) {}
      }
    }
    _initialized = true;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞–ø–æ–º –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
  Future<String?> getLaunchRoute() async {
    try {
      final details = await _plugin.getNotificationAppLaunchDetails();
      final payload = details?.notificationResponse?.payload;
      if (payload == null) return null;
      final data = json.decode(payload) as Map<String, dynamic>;
      final route = data['route']?.toString();
      return (route != null && route.isNotEmpty) ? route : null;
    } catch (_) {
      return null;
    }
  }

  Future<void> _ensureAndroidChannels() async {
    if (!Platform.isAndroid) return;
    final android = _plugin.resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin>();
    if (android == null) return;
    try {
      await android.createNotificationChannel(const AndroidNotificationChannel(
        'goal_critical',
        '–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–æ —Ü–µ–ª—è–º',
        description: '–í–∞–∂–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã –∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º',
        importance: Importance.max,
      ));
      await android.createNotificationChannel(const AndroidNotificationChannel(
        'goal_reminder',
        '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º',
        description: '–ü–ª–∞–Ω –Ω–µ–¥–µ–ª–∏, —Å–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ –∏ —á–µ–∫–∏–Ω',
        importance: Importance.high,
      ));
      await android.createNotificationChannel(const AndroidNotificationChannel(
        'gp_economy',
        '–≠–∫–æ–Ω–æ–º–∏–∫–∞ GP',
        description: '–ü–æ–∫—É–ø–∫–∏, –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å GP',
        importance: Importance.high,
      ));
      await android.createNotificationChannel(const AndroidNotificationChannel(
        'education',
        '–û–±—É—á–µ–Ω–∏–µ',
        description: '–ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫—É—Ä—Å—ã –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
        importance: Importance.defaultImportance,
      ));
      await android.createNotificationChannel(const AndroidNotificationChannel(
        'chat_messages',
        '–°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–æ–≤',
        description: '–û—Ç–≤–µ—Ç—ã –ò–ò‚Äë—Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤',
        importance: Importance.high,
      ));
      try {
        Sentry.addBreadcrumb(Breadcrumb(
          level: SentryLevel.info,
          category: 'notif',
          message: 'notif_channels_ready',
        ));
      } catch (_) {}
    } catch (_) {}
  }

  Future<void> scheduleWeeklyPlan() async {
    if (!_initialized) await initialize();
    const AndroidNotificationDetails android = AndroidNotificationDetails(
      'goal_reminder',
      '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ü–µ–ª—è–º',
      channelDescription: '–ü–ª–∞–Ω/—Å–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ –∏ —á–µ–∫–∏–Ω',
      importance: Importance.high,
      priority: Priority.high,
    );
    const NotificationDetails details = NotificationDetails(android: android);

    // –ü–Ω 09:00
    await _plugin.zonedSchedule(
      1001,
      '–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è! –ü–ª–∞–Ω –≥–æ—Ç–æ–≤?',
      '–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–¶–µ–ª—å¬ª –∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø–ª–∞–Ω –Ω–µ–¥–µ–ª–∏',
      _nextInstanceOf(weekday: DateTime.monday, hour: 9, minute: 0),
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
      payload: '{"route":"/goal"}',
    );

    // –°—Ä 14:00
    await _plugin.zonedSchedule(
      1002,
      '–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏. –ö–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å?',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª—å –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å',
      _nextInstanceOf(weekday: DateTime.wednesday, hour: 14, minute: 0),
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
      payload: '{"route":"/goal"}',
    );

    // –ü—Ç 16:00
    await _plugin.zonedSchedule(
      1003,
      '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ',
      '–ß–µ—Ä–µ–∑ –¥–≤–∞ –¥–Ω—è ‚Äî —á–µ–∫–∏–Ω –Ω–µ–¥–µ–ª–∏',
      _nextInstanceOf(weekday: DateTime.friday, hour: 16, minute: 0),
      details,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
      payload: '{"route":"/goal"}',
    );

    // –í—Å 10:00 / 13:00 / 18:00
    for (final hm in const [(10, 0), (13, 0), (18, 0)]) {
      await _plugin.zonedSchedule(
        1100 + hm.$1,
        '–í—Ä–µ–º—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —á–µ–∫–∏–Ω–∞',
        '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–¶–µ–ª—å¬ª',
        _nextInstanceOf(weekday: DateTime.sunday, hour: hm.$1, minute: hm.$2),
        details,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
        payload: '{"route":"/goal"}',
      );
    }
    try {
      Sentry.addBreadcrumb(Breadcrumb(
        level: SentryLevel.info,
        category: 'notif',
        message: 'notif_scheduled_weekly_plan',
      ));
    } catch (_) {}
  }

  /// –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ¬´–ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ¬ª
  Future<void> showLibraryDigestOnce() async {
    if (!_initialized) await initialize();
    const android = AndroidNotificationDetails(
      'education',
      '–û–±—É—á–µ–Ω–∏–µ',
      channelDescription: '–ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫—É—Ä—Å—ã –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
      importance: Importance.defaultImportance,
      priority: Priority.defaultPriority,
    );
    const details = NotificationDetails(android: android);
    await _plugin.show(
      2001,
      'üìö –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ',
      '–û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ë–∏–±–ª–∏–æ—Ç–µ–∫—É¬ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      details,
      payload: '{"route":"/library"}',
    );
    try {
      Sentry.addBreadcrumb(Breadcrumb(
        level: SentryLevel.info,
        category: 'notif',
        message: 'notif_library_digest_shown',
      ));
    } catch (_) {}
  }

  tz.TZDateTime _nextInstanceOf(
      {required int weekday, required int hour, required int minute}) {
    final now = tz.TZDateTime.now(tz.local);
    var scheduled =
        tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
    while (scheduled.weekday != weekday || !scheduled.isAfter(now)) {
      scheduled = scheduled.add(const Duration(days: 1));
    }
    return scheduled;
  }
}
