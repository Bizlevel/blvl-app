import 'dart:convert';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:sentry_flutter/sentry_flutter.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:bizlevel/utils/env_helper.dart';

/// Typed failure for any Leo related errors.
class LeoFailure implements Exception {
  final String message;
  LeoFailure(this.message);

  @override
  String toString() => 'LeoFailure: $message';
}

/// Centralised service for interacting with Leo AI mentor Edge Function
/// and related Supabase data (–ª–∏–º–∏—Ç—ã, —á–∞—Ç—ã).
class LeoService {
  /// –ò–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π [SupabaseClient] —á–µ—Ä–µ–∑ DI.
  LeoService(this._client);

  final SupabaseClient _client;

  // We use Dio because Edge Functions —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏
  // –∏ –ø—Ä–æ—â–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã/–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏.
  static final Dio _edgeDio = Dio(BaseOptions(
    baseUrl:
        '${const String.fromEnvironment('SUPABASE_URL', defaultValue: 'https://acevqbdpzgbtqznbpgzr.supabase.co')}/functions/v1',
    connectTimeout: const Duration(seconds: 10),
    sendTimeout: const Duration(seconds: 20),
    receiveTimeout: const Duration(seconds: 20),
    responseType: ResponseType.json,
  ));

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Edge Function `leo-chat` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
  /// –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤.
  /// Expects [messages] in chat completion API format.
  Future<Map<String, dynamic>> sendMessage({
    required List<Map<String, dynamic>> messages,
    String bot = 'leo',
  }) async {
    // debug: entry point marker (no PII)
    // print('üîß DEBUG: sendMessage');
    final session = _client.auth.currentSession;
    if (session == null) {
      throw LeoFailure('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    // Do not log JWT/token to avoid PII

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Edge Function
    // print('üîß DEBUG: Using Edge Function');
    return _withRetry(() async {
      try {
        final response = await _edgeDio.post(
          '/leo-chat',
          data: jsonEncode({'messages': messages, 'bot': bot}),
          options: Options(headers: {
            'Authorization': 'Bearer ${envOrDefine('SUPABASE_ANON_KEY')}',
            'apikey': envOrDefine('SUPABASE_ANON_KEY'),
            'x-user-jwt': session.accessToken,
            'Content-Type': 'application/json',
          }),
        );

        print('üîß DEBUG: Response status: ${response.statusCode}');
        print('üîß DEBUG: Response data: ${response.data}');

        if (response.statusCode == 200 &&
            response.data is Map<String, dynamic>) {
          final responseData = Map<String, dynamic>.from(response.data);
          return responseData;
        } else {
          final message =
              (response.data is Map && response.data['error'] != null)
                  ? response.data['error'] as String
                  : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Leo';
          throw LeoFailure(message);
        }
      } on DioException catch (e) {
        try {
          await Sentry.captureException(e);
        } catch (_) {
          // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          print('DEBUG: Exception (Sentry not configured): $e');
        }
        if (e.error is SocketException) {
          throw LeoFailure('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
        }
        final data = e.response?.data;
        if (data is Map) {
          final err = (data['error'] ?? data['message'])?.toString();
          final details = data['details']?.toString();
          if (err != null && err.isNotEmpty) {
            final composed =
                details != null && details.isNotEmpty ? '$err: $details' : err;
            throw LeoFailure(_humanizeServerError(composed));
          }
        }
        if ((e.response?.statusCode ?? 0) >= 500) {
          throw LeoFailure(
              '–°–µ—Ä–≤–µ—Ä —á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        throw LeoFailure('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Leo');
      } catch (e) {
        try {
          await Sentry.captureException(e);
        } catch (_) {
          // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          print('DEBUG: Exception (Sentry not configured): $e');
        }
        throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç Leo');
      }
    });
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG —Å–∏—Å—Ç–µ–º—ã
  /// RAG –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫—Ä–æ–º–µ –±–æ—Ç–∞ 'max')
  Future<Map<String, dynamic>> sendMessageWithRAG({
    required List<Map<String, dynamic>> messages,
    required String userContext,
    required String levelContext,
    String bot = 'leo',
    String? chatId, // –î–æ–±–∞–≤–ª—è–µ–º chatId –ø–∞—Ä–∞–º–µ—Ç—Ä
  }) async {
    final session = _client.auth.currentSession;
    if (session == null) {
      throw LeoFailure('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    print('üîß DEBUG: sendMessageWithRAG –Ω–∞—á–∞–ª—Å—è');
    print('üîß DEBUG: session.user.id = ${session.user?.id}');
    print('üîß DEBUG: JWT –¥–ª–∏–Ω–∞ = ${session.accessToken.length}');
    print(
        'üîß DEBUG: JWT –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å = ${session.accessToken.substring(0, 20)}...');
    print('üîß DEBUG: chatId = $chatId'); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ chatId

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Edge Function. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π RAG –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    return _withRetry(() async {
      try {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ "null" –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        final cleanUserContext =
            (userContext == 'null' || userContext.isEmpty) ? null : userContext;
        final cleanLevelContext =
            (levelContext == 'null' || levelContext.isEmpty)
                ? null
                : levelContext;

        print('üîß DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ /leo-chat');
        print('üîß DEBUG: payload size = ${jsonEncode({
              'messages': messages,
              'userContext': cleanUserContext,
              'levelContext': cleanLevelContext,
              'bot': bot,
              'chatId': chatId, // –î–æ–±–∞–≤–ª—è–µ–º chatId –≤ payload
            }).length} —Å–∏–º–≤–æ–ª–æ–≤');

        final response = await _edgeDio.post(
          '/leo-chat',
          data: jsonEncode({
            'messages': messages,
            'userContext': cleanUserContext,
            'levelContext': cleanLevelContext,
            'bot': bot,
            'chatId': chatId, // –î–æ–±–∞–≤–ª—è–µ–º chatId –≤ payload
          }),
          options: Options(headers: {
            'Authorization': 'Bearer ${envOrDefine('SUPABASE_ANON_KEY')}',
            'apikey': envOrDefine('SUPABASE_ANON_KEY'),
            'x-user-jwt': session.accessToken,
            'Content-Type': 'application/json',
          }),
        );

        print('üîß DEBUG: –ü–æ–ª—É—á–µ–Ω HTTP –æ—Ç–≤–µ—Ç: ${response.statusCode}');

        if (response.statusCode == 200 &&
            response.data is Map<String, dynamic>) {
          final responseData = Map<String, dynamic>.from(response.data);
          return responseData;
        } else {
          final message =
              (response.data is Map && response.data['error'] != null)
                  ? response.data['error'] as String
                  : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Leo';
          throw LeoFailure(message);
        }
      } on DioException catch (e) {
        try {
          await Sentry.captureException(e);
        } catch (_) {
          // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          print('DEBUG: Exception (Sentry not configured): $e');
        }
        if (e.error is SocketException) {
          throw LeoFailure('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
        }
        final data = e.response?.data;
        if (data is Map) {
          final err = (data['error'] ?? data['message'])?.toString();
          final details = data['details']?.toString();
          if (err != null && err.isNotEmpty) {
            final composed =
                details != null && details.isNotEmpty ? '$err: $details' : err;
            throw LeoFailure(_humanizeServerError(composed));
          }
        }
        if ((e.response?.statusCode ?? 0) >= 500) {
          throw LeoFailure(
              '–°–µ—Ä–≤–µ—Ä —á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        throw LeoFailure('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Leo');
      } catch (e) {
        try {
          await Sentry.captureException(e);
        } catch (_) {
          // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          print('DEBUG: Exception (Sentry not configured): $e');
        }
        throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç Leo');
      }
    });
  }

  /// –†–µ–∂–∏–º ¬´—á–∞—Ç‚Äë—Ç–µ—Å—Ç¬ª: –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –±–µ–∑ —É—á—ë—Ç–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞.
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `{ message: { content } }` –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
  Future<Map<String, dynamic>> sendQuizFeedback({
    required String question,
    required List<String> options,
    required int selectedIndex,
    required int correctIndex,
    String userContext = '',
    int maxTokens = 180,
  }) async {
    final session = _client.auth.currentSession;
    if (session == null) {
      throw LeoFailure('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ "null" –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    final cleanUserContext =
        (userContext == 'null' || userContext.isEmpty) ? null : userContext;

    final payload = {
      'mode': 'quiz',
      'isCorrect': selectedIndex == correctIndex,
      'quiz': {
        'question': question,
        'options': options,
        'selectedIndex': selectedIndex,
        'correctIndex': correctIndex,
      },
      'userContext': cleanUserContext,
      'maxTokens': maxTokens,
    };

    return _withRetry(() async {
      try {
        final response = await _edgeDio.post(
          '/leo-chat',
          data: jsonEncode(payload),
          options: Options(headers: {
            'Authorization': 'Bearer ${envOrDefine('SUPABASE_ANON_KEY')}',
            'apikey': envOrDefine('SUPABASE_ANON_KEY'),
            'x-user-jwt': session.accessToken,
            'Content-Type': 'application/json',
          }),
        );

        if (response.statusCode == 200 &&
            response.data is Map<String, dynamic>) {
          return Map<String, dynamic>.from(response.data);
        }

        final message = (response.data is Map && response.data['error'] != null)
            ? response.data['error'] as String
            : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Leo (quiz)';
        throw LeoFailure(message);
      } on DioException catch (e) {
        if (e.error is SocketException) {
          throw LeoFailure('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
        }
        try {
          await Sentry.captureException(e);
        } catch (_) {
          // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          print('DEBUG: Exception (Sentry not configured): $e');
        }
        final data = e.response?.data;
        if (data is Map) {
          final err = (data['error'] ?? data['message'])?.toString();
          final details = data['details']?.toString();
          if (err != null && err.isNotEmpty) {
            final composed = (details != null && details.isNotEmpty)
                ? '$err: $details'
                : err;
            throw LeoFailure(_humanizeServerError(composed));
          }
        }
        if ((e.response?.statusCode ?? 0) >= 500) {
          throw LeoFailure(
              '–°–µ—Ä–≤–µ—Ä —á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        throw LeoFailure('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Leo (quiz)');
      } catch (e) {
        try {
          await Sentry.captureException(e);
        } catch (_) {
          // Sentry –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
          print('DEBUG: Exception (Sentry not configured): $e');
        }
        throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç Leo (quiz)');
      }
    });
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
  /// RAG —Ç–µ–ø–µ—Ä—å –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é leo-chat –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

  /// Generic retry with exponential backoff (300ms, 600ms)
  Future<T> _withRetry<T>(Future<T> Function() action,
      {int retries = 2}) async {
    int attempt = 0;
    while (true) {
      try {
        return await action();
      } catch (e) {
        if (attempt >= retries) rethrow;
        await Future.delayed(Duration(milliseconds: 300 * (1 << attempt)));
        attempt++;
      }
    }
  }

  String _humanizeServerError(String raw) {
    // –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –ø–æ–Ω—è—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (raw.contains('openai_config_error')) {
      return '–°–µ—Ä–≤–∏—Å –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.';
    }
    if (raw.contains('openai_error')) {
      return '–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ò–ò‚Äë–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.';
    }
    return raw;
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π.
  Future<void> resetUnread(String chatId) async {
    try {
      await _client.rpc('reset_leo_unread', params: {'p_chat_id': chatId});
    } catch (_) {}
  }

  Future<int> checkMessageLimit() async {
    final user = _client.auth.currentUser;
    if (user == null) throw LeoFailure('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    try {
      final data = await _client
          .from('users')
          .select(
              'is_premium, leo_messages_total, leo_messages_today, leo_reset_at')
          .eq('id', user.id)
          .single();

      final isPremium = data['is_premium'] as bool? ?? false;
      if (isPremium) {
        // –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç, —Å–µ—Ä–≤–µ—Ä —É–∂–µ —Å–±—Ä–æ—Å–∏–ª. –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ
        return data['leo_messages_today'] as int? ?? 0;
      } else {
        return data['leo_messages_total'] as int? ?? 0;
      }
    } on PostgrestException catch (e) {
      throw LeoFailure(e.message);
    } catch (e) {
      throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
  }

  /// –î–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è Premium ‚Äì —Å—É—Ç–æ—á–Ω—ã–π,
  /// –¥–ª—è Free ‚Äì –æ–±—â–∏–π.
  Future<int> decrementMessageCount() async {
    final user = _client.auth.currentUser;
    if (user == null) throw LeoFailure('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    try {
      // Call atomic RPC which returns remaining messages
      final response = await _client.rpc('decrement_leo_message');
      final remaining = response as int? ?? 0;
      return remaining;
    } on PostgrestException catch (e) {
      throw LeoFailure(e.message);
    } catch (e) {
      throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É `leo_messages` –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫
  /// —Å–æ–æ–±—â–µ–Ω–∏–π –≤ `leo_chats`. –ï—Å–ª–∏ —á–∞—Ç –Ω–æ–≤—ã–π ‚Äì —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ `leo_chats`.
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `chatId` (–Ω–æ–≤—ã–π –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π).
  Future<String> saveConversation({
    required String role,
    required String content,
    String? chatId,
    String bot = 'leo',
  }) async {
    final user = _client.auth.currentUser;
    if (user == null) throw LeoFailure('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    try {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –±–µ—Ä—ë–º –µ–≥–æ id –∏–∑ –æ—Ç–≤–µ—Ç–∞ Supabase.
      String effectiveChatId = chatId ?? '';

      if (chatId == null) {
        final inserted = await _client
            .from('leo_chats')
            .insert({
              'user_id': user.id,
              'title': content.length > 40 ? content.substring(0, 40) : content,
              'bot': bot,
            })
            .select('id')
            .single();

        effectiveChatId = inserted['id'] as String;
      }

      // insert message
      await _client.from('leo_messages').insert({
        'chat_id': effectiveChatId,
        'user_id': user.id,
        'role': role,
        'content': content,
      });

      // increment message_count (+1)
      // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ message_count
      final chatRow = await _client
          .from('leo_chats')
          .select('message_count')
          .eq('id', effectiveChatId)
          .single();

      final currentCount = chatRow['message_count'] as int? ?? 0;

      await _client.from('leo_chats').update({
        'message_count': currentCount + 1,
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', effectiveChatId);

      return effectiveChatId;
    } on PostgrestException catch (e) {
      throw LeoFailure(e.message);
    } catch (e) {
      throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }

  /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ AI –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—É ai_message
  /// –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–Ω–µ—à–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  Future<void> saveAiMessageData({
    required String leoMessageId,
    required String chatId,
    required String userId,
    required int inputTokens,
    required int outputTokens,
    required double costUsd,
    required String modelUsed,
    required String botType,
    String requestType = 'chat',
  }) async {
    try {
      await _client.from('ai_message').insert({
        'leo_message_id': leoMessageId,
        'chat_id': chatId,
        'user_id': userId,
        'input_tokens': inputTokens,
        'output_tokens': outputTokens,
        'total_tokens': inputTokens + outputTokens,
        'cost_usd': costUsd,
        'model_used': modelUsed,
        'bot_type': botType,
        'request_type': requestType,
      });

      print('üîß DEBUG: AI message data saved via public method');
    } on PostgrestException catch (e) {
      print(
          'Warning: Failed to save AI message data to database: ${e.message}');
      rethrow; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ
    } catch (e) {
      print('Warning: Unexpected error saving AI message data: $e');
      rethrow;
    }
  }
}
