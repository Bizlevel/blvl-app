import 'dart:convert';
import 'dart:io';

import 'package:dio/dio.dart';
// import 'package:sentry_flutter/sentry_flutter.dart';
import '../utils/env_helper.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

/// Typed failure for any Leo related errors.
class LeoFailure implements Exception {
  final String message;
  LeoFailure(this.message);

  @override
  String toString() => 'LeoFailure: $message';
}

/// Centralised service for interacting with Leo AI mentor Edge Function
/// and related Supabase data (–ª–∏–º–∏—Ç—ã, —á–∞—Ç—ã).
class LeoService {
  /// –ò–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π [SupabaseClient] —á–µ—Ä–µ–∑ DI.
  LeoService(this._client);

  final SupabaseClient _client;

  // We use Dio because Edge Functions —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏
  // –∏ –ø—Ä–æ—â–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã/–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏.
  static final Dio _edgeDio = Dio(BaseOptions(
    baseUrl:
        '${const String.fromEnvironment('SUPABASE_URL', defaultValue: 'https://acevqbdpzgbtqznbpgzr.supabase.co')}/functions/v1',
    connectTimeout: const Duration(seconds: 10),
    sendTimeout: const Duration(seconds: 20),
    receiveTimeout: const Duration(seconds: 20),
    responseType: ResponseType.json,
  ));

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Edge Function `leo-chat` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
  /// –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤.
  /// Expects [messages] in chat completion API format.
  Future<Map<String, dynamic>> sendMessage(
      {required List<Map<String, dynamic>> messages}) async {
    print('üîß DEBUG: sendMessage –≤—ã–∑–≤–∞–Ω');
    final session = _client.auth.currentSession;
    if (session == null) {
      throw LeoFailure('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }
    
    print('üîß DEBUG: JWT Token: ${session.accessToken.substring(0, 50)}...');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Edge Function
    print('üîß DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Edge Function');
    return _withRetry(() async {
      try {
        final response = await _edgeDio.post(
          '/leo-chat',
          data: jsonEncode({'messages': messages}),
          options: Options(headers: {
            'Authorization': 'Bearer ${session.accessToken}',
            'Content-Type': 'application/json',
          }),
        );
        
        print('üîß DEBUG: Response status: ${response.statusCode}');
        print('üîß DEBUG: Response data: ${response.data}');

        if (response.statusCode == 200 &&
            response.data is Map<String, dynamic>) {
          return Map<String, dynamic>.from(response.data);
        } else {
          final message =
              (response.data is Map && response.data['error'] != null)
                  ? response.data['error'] as String
                  : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Leo';
          throw LeoFailure(message);
        }
      } on DioException catch (e, st) {
        // await Sentry.captureException(e, stackTrace: st);
        if (e.error is SocketException) {
          throw LeoFailure('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
        }
        throw LeoFailure(e.message ?? '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Leo');
      } catch (e, st) {
        // await Sentry.captureException(e, stackTrace: st);
        throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç Leo');
      }
    });
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG —Å–∏—Å—Ç–µ–º—ã
  Future<Map<String, dynamic>> sendMessageWithRAG({
    required List<Map<String, dynamic>> messages,
    required String userContext,
    required String levelContext,
  }) async {
    final session = _client.auth.currentSession;
    if (session == null) {
      throw LeoFailure('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    }

    print('üîß DEBUG: sendMessageWithRAG –≤—ã–∑–≤–∞–Ω');
    print('üîß DEBUG: userContext = "$userContext"');
    print('üîß DEBUG: levelContext = "$levelContext"');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    String knowledgeContext = '';
    try {
      knowledgeContext = await _getKnowledgeContext(
        messages.last['content'] as String,
        userContext,
        levelContext,
      );
    } catch (e) {
      // –ï—Å–ª–∏ RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
      // await Sentry.captureException(e);
    }

    print('üîß DEBUG: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–ó: ${knowledgeContext.isNotEmpty ? "–ï–°–¢–¨" : "–ù–ï–¢"}');
    print('üîß DEBUG: –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${messages.length}');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Edge Function —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    // Edge Function —Å–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ JWT —Ç–æ–∫–µ–Ω–∞
    return _withRetry(() async {
      try {
        final response = await _edgeDio.post(
          '/leo-chat',
          data: jsonEncode({
            'messages': messages,
            'userContext': userContext,
            'levelContext': levelContext,
            'knowledgeContext': knowledgeContext,
          }),
          options: Options(headers: {
            'Authorization': 'Bearer ${session.accessToken}',
            'Content-Type': 'application/json',
          }),
        );

        if (response.statusCode == 200 &&
            response.data is Map<String, dynamic>) {
          return Map<String, dynamic>.from(response.data);
        } else {
          final message =
              (response.data is Map && response.data['error'] != null)
                  ? response.data['error'] as String
                  : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Leo';
          throw LeoFailure(message);
        }
      } on DioException catch (e, st) {
        // await Sentry.captureException(e, stackTrace: st);
        if (e.error is SocketException) {
          throw LeoFailure('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º');
        }
        throw LeoFailure(e.message ?? '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Leo');
      } catch (e, st) {
        // await Sentry.captureException(e, stackTrace: st);
        throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç Leo');
      }
    });
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
  Future<String> _getKnowledgeContext(
    String query,
    String userContext,
    String levelContext,
  ) async {
    try {
      print('üîç DEBUG: –ó–∞–ø—Ä–æ—Å –∫ RAG: $query');
      
      final response = await _edgeDio.post(
        '/leo-rag',
        data: jsonEncode({
          'query': query,
          'userContext': userContext,
          'levelContext': levelContext,
        }),
        options: Options(headers: {
          'Authorization': 'Bearer ${_client.auth.currentSession?.accessToken}',
          'Content-Type': 'application/json',
        }),
      );

      if (response.statusCode == 200 && response.data is Map<String, dynamic>) {
        final context = response.data['context'] as String? ?? '';
        // print('üîç DEBUG: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç RAG: ${response.data}');
        print('üîç DEBUG: –¢–∏–ø context: ${context.runtimeType}');
        print('üîç DEBUG: –î–ª–∏–Ω–∞ context: ${context.length}');
        // print('üîç DEBUG: –ö–æ–Ω—Ç–µ–∫—Å—Ç (raw): "$context"');
        print('üìö DEBUG: –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–ó: ${context.isNotEmpty ? "–ï–°–¢–¨" : "–ù–ï–¢"}');
        // if (context.isNotEmpty) {
        //   print('üìù DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:');
        //   print(context.length > 200 ? context.substring(0, 200) : context);
        // }
        return context;
      } else {
        print('‚ùå DEBUG: RAG –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.statusCode}');
        // –ï—Å–ª–∏ RAG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return '';
      }
    } catch (e) {
      print('‚ùå DEBUG: –û—à–∏–±–∫–∞ RAG: $e');
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
      // await Sentry.captureException(e);
      return '';
    }
  }

  /// Generic retry with exponential backoff (300ms, 600ms)
  Future<T> _withRetry<T>(Future<T> Function() action,
      {int retries = 2}) async {
    int attempt = 0;
    while (true) {
      try {
        return await action();
      } catch (e) {
        if (attempt >= retries) rethrow;
        await Future.delayed(Duration(milliseconds: 300 * (1 << attempt)));
        attempt++;
      }
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π.
  Future<void> resetUnread(String chatId) async {
    try {
      await _client.rpc('reset_leo_unread', params: {'p_chat_id': chatId});
    } catch (_) {}
  }

  Future<int> checkMessageLimit() async {
    final user = _client.auth.currentUser;
    if (user == null) throw LeoFailure('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    try {
      final data = await _client
          .from('users')
          .select(
              'is_premium, leo_messages_total, leo_messages_today, leo_reset_at')
          .eq('id', user.id)
          .single();

      final isPremium = data['is_premium'] as bool? ?? false;
      if (isPremium) {
        // –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç, —Å–µ—Ä–≤–µ—Ä —É–∂–µ —Å–±—Ä–æ—Å–∏–ª. –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ
        return data['leo_messages_today'] as int? ?? 0;
      } else {
        return data['leo_messages_total'] as int? ?? 0;
      }
    } on PostgrestException catch (e) {
      throw LeoFailure(e.message);
    } catch (e) {
      throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
  }

  /// –î–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è Premium ‚Äì —Å—É—Ç–æ—á–Ω—ã–π,
  /// –¥–ª—è Free ‚Äì –æ–±—â–∏–π.
  Future<int> decrementMessageCount() async {
    final user = _client.auth.currentUser;
    if (user == null) throw LeoFailure('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    try {
      // Call atomic RPC which returns remaining messages
      final response = await _client.rpc('decrement_leo_message');
      final remaining = response as int? ?? 0;
      return remaining;
    } on PostgrestException catch (e) {
      throw LeoFailure(e.message);
    } catch (e) {
      throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É `leo_messages` –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç—á–∏–∫
  /// —Å–æ–æ–±—â–µ–Ω–∏–π –≤ `leo_chats`. –ï—Å–ª–∏ —á–∞—Ç –Ω–æ–≤—ã–π ‚Äì —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ `leo_chats`.
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `chatId` (–Ω–æ–≤—ã–π –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π).
  Future<String> saveConversation({
    required String role,
    required String content,
    String? chatId,
  }) async {
    final user = _client.auth.currentUser;
    if (user == null) throw LeoFailure('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

    try {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–∞—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏ –±–µ—Ä—ë–º –µ–≥–æ id –∏–∑ –æ—Ç–≤–µ—Ç–∞ Supabase.
      String effectiveChatId = chatId ?? '';

      if (chatId == null) {
        final inserted = await _client
            .from('leo_chats')
            .insert({
              'user_id': user.id,
              'title': content.length > 40 ? content.substring(0, 40) : content,
            })
            .select('id')
            .single();

        effectiveChatId = inserted['id'] as String;
      }

      // insert message
      await _client.from('leo_messages').insert({
        'chat_id': effectiveChatId,
        'user_id': user.id,
        'role': role,
        'content': content,
      });

      // increment message_count (+1)
      // –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ message_count
      final chatRow = await _client
          .from('leo_chats')
          .select('message_count')
          .eq('id', effectiveChatId)
          .single();

      final currentCount = chatRow['message_count'] as int? ?? 0;

      await _client.from('leo_chats').update({
        'message_count': currentCount + 1,
        'updated_at': DateTime.now().toIso8601String(),
      }).eq('id', effectiveChatId);

      return effectiveChatId;
    } on PostgrestException catch (e) {
      throw LeoFailure(e.message);
    } catch (e) {
      throw LeoFailure('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
  }
}
