import 'package:flutter/material.dart';
import 'package:bizlevel/models/user_skill_model.dart';

/// –í–∏–¥–∂–µ—Ç –±–ª–æ–∫–∞ ¬´–®–∫–∞–ª–∞ –Ω–∞–≤—ã–∫–æ–≤¬ª –≤ –ø—Ä–æ—Ñ–∏–ª–µ.
/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 5 –Ω–∞–≤—ã–∫–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ.
class SkillsTreeView extends StatelessWidget {
  const SkillsTreeView(
      {super.key, required this.skills, required this.currentLevel});

  /// –°–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ–≥–¥–∞ 5 –∑–∞–ø–∏—Å–µ–π, points –æ—Ç 0 –¥–æ 10).
  final List<UserSkillModel> skills;
  final int currentLevel;

  static const int _maxPoints = 10;

  // –¶–≤–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ id –Ω–∞–≤—ã–∫–∞.
  static const Map<int, Color> _skillColors = {
    1: Colors.purple, // –§–æ–∫—É—Å –ª–∏–¥–µ—Ä–∞
    2: Colors.amber, // –î–µ–Ω–µ–∂–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
    3: Colors.orange, // –ú–∞–≥–Ω–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    4: Colors.blue, // –°–∏—Å—Ç–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏–π
    5: Colors.green, // –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
  };

  // –ü–æ–¥–±–æ—Ä –∏–∫–æ–Ω–æ–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏).
  static const Map<int, IconData> _skillIcons = {
    1: Icons.psychology_alt_outlined,
    2: Icons.attach_money,
    3: Icons.campaign_outlined,
    4: Icons.task_alt_outlined,
    5: Icons.trending_up,
  };

  @override
  Widget build(BuildContext context) {
    if (skills.isEmpty) {
      return const Center(child: Text('–ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–∫–∞—á–∞–Ω—ã.'));
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞–≤—ã–∫ (–º–∏–Ω–∏–º—É–º –æ—á–∫–æ–≤ < 10).
    final UserSkillModel? nextSkill = skills
        .where((s) => s.points < _maxPoints)
        .fold<UserSkillModel?>(null, (prev, curr) {
      if (prev == null) return curr;
      return curr.points < prev.points ? curr : prev;
    });

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '–®–∫–∞–ª–∞ –Ω–∞–≤—ã–∫–æ–≤',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.w600),
          ),
          const SizedBox(height: 12),
          ..._buildSkillRows(),
          const SizedBox(height: 12),
          Divider(color: Colors.grey.shade300),
          const SizedBox(height: 8),
          if (nextSkill == null)
            const Text(
              '–í—Å–µ –Ω–∞–≤—ã–∫–∏ –æ—Å–≤–æ–µ–Ω—ã! üéâ',
              style: TextStyle(fontWeight: FontWeight.w500),
            )
          else ...[
            Text(
              '–°–ª–µ–¥—É—é—â–∏–π –Ω–∞–≤—ã–∫: ${nextSkill.skillName}',
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
            Text(
              '–£—Ä–æ–≤–µ–Ω—å $currentLevel: +1 –Ω–∞–≤—ã–∫',
              style: const TextStyle(color: Colors.grey),
            ),
          ],
        ],
      ),
    );
  }

  List<Widget> _buildSkillRows() {
    final List<Widget> rows = [];
    for (var i = 0; i < skills.length; i++) {
      final skill = skills[i];
      final color = _skillColors[skill.skillId] ?? Colors.blue;
      final icon = _skillIcons[skill.skillId] ?? Icons.star_border;
      rows.add(_SkillRow(skill: skill, color: color, icon: icon));
      if (i != skills.length - 1) {
        rows.add(Divider(color: Colors.grey.shade300));
      }
    }
    return rows;
  }
}

class _SkillRow extends StatelessWidget {
  const _SkillRow(
      {required this.skill, required this.color, required this.icon});

  final UserSkillModel skill;
  final Color color;
  final IconData icon;

  static const int _maxPoints = SkillsTreeView._maxPoints;

  @override
  Widget build(BuildContext context) {
    final progress = skill.points / _maxPoints;
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(icon, size: 20, color: color),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  skill.skillName,
                  style: const TextStyle(fontWeight: FontWeight.w500),
                ),
              ),
              Text('${skill.points}/$_maxPoints'),
            ],
          ),
          const SizedBox(height: 6),
          TweenAnimationBuilder<double>(
            tween: Tween(begin: 0, end: progress),
            duration: const Duration(milliseconds: 600),
            builder: (context, value, _) {
              return LinearProgressIndicator(
                value: value,
                minHeight: 6,
                backgroundColor: color.withOpacity(0.2),
                valueColor: AlwaysStoppedAnimation<Color>(color),
              );
            },
          ),
        ],
      ),
    );
  }
}
